{"version":3,"file":"index-DGTw03J7.js","sources":["../../src/core/timer.ts","../../src/utils/smooth-movement.ts","../../src/game-state-machine.ts","../../src/core/controls.ts","../../src/core/util/canvas.ts","../../src/core/emoji.ts","../../src/game/sprite-loader.ts","../../src/core/tileset.ts","../../src/core/util/color.ts","../../src/game/sprites.ts","../../src/game/game-assets.ts","../../src/core/util/image-generator.ts","../../src/core/font.ts","../../src/core/draw-engine.ts","../../src/game/constants.ts","../../src/core/game-object.ts","../../src/core/event.ts","../../src/game/entities/pentagram-attack.ts","../../src/game/grid-utils.ts","../../src/core/audio.ts","../../src/game/entities/player.ts","../../src/core/game-static-object.ts","../../src/game/entities/tree.ts","../../src/core/util/rng.ts","../../src/game/entities/house.ts","../../src/game/entities/villager.ts","../../src/game/entities/farm.ts","../../src/game/entities/village.ts","../../src/game/entities/icon.ts","../../src/game/path-findind.ts","../../src/game/entities/hp-bar.ts","../../src/game/entities/spirit.ts","../../src/game/entities/statue.ts","../../src/game/game-map.ts","../../src/core/util/util.ts","../../src/game/mini-map.ts","../../src/game/dialog-box.ts","../../src/game/hud.ts","../../src/game/entities/obelisk.ts","../../src/game/actions.ts","../../src/game/game-data.ts","../../src/core/story-engine.ts","../../src/game/game-story.ts","../../src/core/music-player.ts","../../src/game-states/game.state.ts","../../src/game-states/menu.state.ts","../../src/index.ts","../../src/core/state-machine.ts"],"sourcesContent":["type TimeEventHandler = {\n  callback: (() => void)\n  time: number\n  timeLeft: number\n  repeat: number\n}\n\nlet timeEvents: TimeEventHandler[] = [];\n\nexport function addTimeEvent (callback: () => void, time: number, repeat = 0, delay = 0) {\n  timeEvents.push({callback, time, timeLeft: time + delay, repeat});\n}\n\nexport function clearTimers() {\n  timeEvents = [];\n}\n\n/**\n * Updates the time events, checking if any should be executed.\n * @param delta The time in milliseconds since the last update.\n */\nexport function updateTimeEvents(delta: number) {\n  for (let i = timeEvents.length - 1; i >= 0; i--) {\n    const timeEvent = timeEvents[i];\n    if (!timeEvent) {\n      return;\n    }\n    timeEvent.timeLeft -= delta;\n    if (timeEvent.timeLeft <= 0) {\n      timeEvent.callback();\n\n      if (timeEvent.repeat-- <= 0) {\n        timeEvents.splice(i, 1); // Remove the executed event\n      } else {\n        timeEvent.timeLeft = timeEvent.time;\n      }\n    }\n  }\n}\n","import { CELL_WIDTH, CELL_HEIGHT } from '../game/constants';\n\nexport interface SmoothMovementState {\n  x: number;\n  y: number;\n  targetPos: { x: number; y: number };\n  moving: { x: number; y: number };\n  speed: number;\n}\n\n/**\n * Updates position smoothly towards target position using linear interpolation\n * @param state Object containing position, target, and movement state\n * @param timeElapsed Time elapsed since last update in milliseconds\n */\nexport function updatePositionSmoothly(state: SmoothMovementState, timeElapsed: number): void {\n  for (const axis of ['x', 'y'] as const) {\n    if (state[axis] !== state.targetPos[axis]) {\n      const d = state.targetPos[axis] - state[axis];\n      const step = Math.sign(d) * state.speed * timeElapsed / 1000;\n      if (Math.abs(step) >= Math.abs(d)) {\n        state[axis] = state.targetPos[axis];\n      } else {\n        state[axis] += step;\n      }\n    } else {\n      state.moving[axis] = 0;\n      state[axis] = Math.round(state[axis]);\n    }\n  }\n}\n\n/**\n * Sets target position in pixel coordinates based on grid cell coordinates\n * @param state Movement state object\n * @param col Grid column\n * @param row Grid row\n */\nexport function setTargetPosition(state: SmoothMovementState, col: number, row: number): void {\n  state.targetPos.x = col * CELL_WIDTH;\n  state.targetPos.y = row * CELL_HEIGHT;\n}\n\n/**\n * Moves towards a target grid position if the move is valid\n * @param state Movement state object\n * @param targetCol Target column\n * @param targetRow Target row\n * @param currentCol Current column (will be updated)\n * @param currentRow Current row (will be updated)\n * @param isValidMove Function to check if move is valid\n * @returns true if movement was initiated, false otherwise\n */\nexport function moveToGridPosition(\n  state: SmoothMovementState,\n  targetCol: number,\n  targetRow: number,\n  currentCol: { value: number },\n  currentRow: { value: number },\n  isValidMove: (col: number, row: number) => boolean\n): boolean {\n  if (!isValidMove(targetCol, targetRow)) {\n    return false;\n  }\n\n  // Calculate movement direction\n  const deltaCol = targetCol - currentCol.value;\n  const deltaRow = targetRow - currentRow.value;\n\n  // Update grid position\n  currentCol.value = targetCol;\n  currentRow.value = targetRow;\n\n  // Set movement direction\n  state.moving.x = Math.sign(deltaCol);\n  state.moving.y = Math.sign(deltaRow);\n\n  // Set target pixel position\n  setTargetPosition(state, targetCol, targetRow);\n\n  return true;\n}\n","import { StateMachine } from './core/state-machine';\nimport { State } from './core/state';\n\nexport let gameStateMachine: StateMachine;\n\nexport function createGameStateMachine(initialState: State, ...initialArguments: any[]) {\n  gameStateMachine = new StateMachine(initialState, ...initialArguments);\n}\n","class Controls {\n  isUp = false;\n  isDown = false;\n  isLeft = false;\n  isRight = false;\n  isConfirm = false;\n  // isEscape = false;\n  isAction1 = false;\n  isMoving = false;\n  inputDirection: DOMPoint;\n\n  keyMap: Map<string, boolean> = new Map();\n  previousState = {\n    isUp: this.isUp,\n    isDown: this.isDown,\n    isConfirm: this.isConfirm,\n    // isEscape: this.isEscape,\n    isAction1: this.isAction1,\n  };\n\n  constructor() {\n    document.addEventListener('keydown', event => this.toggleKey(event, true));\n    document.addEventListener('keyup', event => this.toggleKey(event, false));\n    this.inputDirection = new DOMPoint();\n  }\n\n  queryController() {\n    this.previousState.isUp = this.isUp;\n    this.previousState.isDown = this.isDown;\n    this.previousState.isConfirm = this.isConfirm;\n    // this.previousState.isEscape = this.isEscape;\n    this.previousState.isAction1 = this.isAction1;\n    const gamepad = navigator.getGamepads()[0];\n\n    const leftVal = (this.keyMap.get('KeyA') || this.keyMap.get('KeyQ') || this.keyMap.get('ArrowLeft')) ? -1 : 0;\n    const rightVal = (this.keyMap.get('KeyD') || this.keyMap.get('ArrowRight')) ? 1 : 0;\n    const upVal = this.keyMap.get('KeyW') || (this.keyMap.get('KeyZ') || this.keyMap.get('ArrowUp')) ? -1 : 0;\n    const downVal = (this.keyMap.get('KeyS') || this.keyMap.get('ArrowDown')) ? 1 : 0;\n    this.inputDirection.x = (leftVal + rightVal) || gamepad?.axes[0] || 0;\n    this.inputDirection.y = (upVal + downVal) || gamepad?.axes[1] || 0;\n\n    // const deadzone = 0.1;\n    // if (Math.hypot(this.inputDirection.x, this.inputDirection.y) < deadzone) {\n    //   this.inputDirection.x = 0;\n    //   this.inputDirection.y = 0;\n    // }\n\n    this.isUp = this.inputDirection.y < 0;\n    this.isDown = this.inputDirection.y > 0;\n    this.isLeft = this.inputDirection.x < 0;\n    this.isRight = this.inputDirection.x > 0;\n    this.isMoving = this.inputDirection.x !== 0 || this.inputDirection.y !== 0;\n    this.isConfirm = Boolean(this.keyMap.get('Enter'));\n    // this.isEscape = Boolean(this.keyMap.get('Escape'));\n    this.isAction1 = Boolean(this.keyMap.get('Space'));\n  }\n\n  private toggleKey(event: KeyboardEvent, isPressed: boolean) {\n    this.keyMap.set(event.code, isPressed);\n  }\n}\n\nexport const controls = new Controls();\n","/* eslint-disable id-denylist */\n// Canvas creation and context helpers for bundle size optimization\n\nexport const createCanvas = (w?: number, h?: number) => {\n  const c = document.createElement('canvas');\n  if (w) c.width = w;\n  if (h) c.height = h;\n  return c;\n};\n\nexport const getCtx = (canvas: HTMLCanvasElement) => canvas.getContext('2d')!;\n\nexport const createCanvasWithCtx = (w?: number, h?: number) => {\n  const canvas = createCanvas(w, h);\n  return [canvas, getCtx(canvas)] as const;\n};\n\nexport const setCanvasSize = (canvas: HTMLCanvasElement, w: number, h: number) => {\n  canvas.width = w;\n  canvas.height = h;\n};\n","import { createCanvasWithCtx } from './util/canvas';\n\n/**\n * Quantizes rgba color values to 8bit.\n */\nconst quantizeToPalette = (r: number, g: number, b: number, a: number) => {\n  // 1-bit transparency\n  if (a < 128) {\n    return [0, 0, 0, 0]; // transparent\n  }\n  const qr = Math.round(r / 51) * 51;\n  const qg = Math.round(g / 51) * 51;\n  const qb = Math.round(b / 51) * 51;\n\n  return [qr, qg, qb, 255];\n};\n\n/**\n * Converts an emoji to a pixelated image by quantizing the colors\n * to 8 bit and the transparency to 1 bit.\n */\nexport const emojiToPixelArt = (\n  emoji: string,\n  fontSize = 10,\n) => {\n  // Some emoji are a bit bigger than the font\n  const spriteScale = 0.25;\n  const spriteSize = Math.floor(fontSize * (1 + spriteScale));\n  const padding = Math.floor(fontSize * spriteScale / 2);\n\n  // Create temporary canvas\n  const [_, tmpCtx] = createCanvasWithCtx(spriteSize, spriteSize);\n\n  // Draw emoji in chosen font size\n  tmpCtx.font = `${fontSize}px sans-serif`;\n  tmpCtx.textBaseline = 'top';\n  tmpCtx.clearRect(0, 0, spriteSize, spriteSize);\n  tmpCtx.translate(-1, 0);\n  tmpCtx.fillText(emoji, padding, padding);\n\n  // Read pixels\n  const imgData = tmpCtx.getImageData(0, 0, spriteSize, spriteSize);\n  const data = imgData.data;\n\n  // Create new image data with quantized colors\n  const outImg = tmpCtx.createImageData(spriteSize, spriteSize);\n  const outData = outImg.data;\n  for (let i = 0; i < data.length; i += 4) {\n    const [r, g, b, a] = quantizeToPalette(\n      data[i],      // red\n      data[i + 1],  // green\n      data[i + 2],  // blue\n      data[i + 3],  // alpha\n    );\n    outData[i] = r;\n    outData[i + 1] = g;\n    outData[i + 2] = b;\n    outData[i + 3] = a;\n  }\n\n  // Create a new canvas to draw the quantized image\n  const [outCanvas, outCtx] = createCanvasWithCtx(spriteSize, spriteSize);\n  outCtx.putImageData(outImg, 0, 0);\n\n  // Create an image element from the canvas\n  const img = new Image();\n  img.src = outCanvas.toDataURL();\n  return img;\n};\n\n\n// const ctx = c.getContext(\"2d\");\n// ctx.imageSmoothingEnabled = false;\n\n\n// const font = 8;\n// const spriteSize = Math.floor(font * 1.25); // must match function logic\n\n// const emojis = ['🔥','🍀','🌼','🐓','🌷','🌹','👻','🥚','🍎'];\n\n// emojis.forEach((emoji, i) => {\n//   const col = i % (100 / spriteSize);       // column in grid\n//   const row = Math.floor(i / (100 / spriteSize)); // row in grid\n//   const x = col * spriteSize;\n//   const y = row * spriteSize;\n\n//   emojiToPixelArt(emoji, ctx, font, x, y);\n// });\n","export const generateImageData = (icon: string, iconPalette: string[]): HTMLImageElement => {\n  const palette = ['#000000', ...iconPalette];\n  \n  const colorsPerByte = palette.length > 4 ? 2 : palette.length > 2 ? 3 : 6;\n  const bytesPerColor = 6 / colorsPerByte;\n  const bitMask = (1 << bytesPerColor) - 1;\n  const canvas = document.createElement('canvas');\n  const size = Math.sqrt(icon.length * colorsPerByte);\n  canvas.setAttribute('width', size.toString());\n  canvas.setAttribute('height', size.toString());\n  const ctx = canvas.getContext('2d')!;\n  const imgData = ctx.createImageData(size, size);\n  const data = imgData.data;\n  \n  let i = 0;\n  [...icon].map(c => {\n    const z = c.charCodeAt(0);\n\n    for (let bit = 0; bit < colorsPerByte; bit++) {\n      const paletteIndex = (z >> bit * bytesPerColor) & bitMask;\n      const hexColor = palette[paletteIndex] || '#000000';\n      \n      // Convert hex to RGB\n      const hex = hexColor.replace('#', '');\n      const r = parseInt(hex.substring(0, 2), 16);\n      const g = parseInt(hex.substring(2, 4), 16);\n      const b = parseInt(hex.substring(4, 6), 16);\n      const a = paletteIndex ? 255 : 0;\n      \n      data[i] = r;\n      data[i + 1] = g;\n      data[i + 2] = b;\n      data[i + 3] = a;\n      i += 4;\n    }\n  });\n\n  \n  ctx.putImageData(imgData, 0, 0);\n  const img = new Image();\n  img.src = canvas.toDataURL();\n  return img;\n};\n","import { generateImageData } from '@/game/sprite-loader';\n\nexport class NewTileset<T extends string | number> {\n  public animations: Record<T, HTMLImageElement[]> = {} as Record<T, HTMLImageElement[]>;\n  public tileSize = 16;\n\n  constructor(\n    public spriteSheet: { size: number, palette: string[]; data: Record<T, string[]> },\n  ) {\n    // Process each animation (sit, idle, walk, run, etc.)\n    for (const [animationName, frames] of Object.entries(spriteSheet.data) as [T, string[]][]) {\n      this.animations[animationName] = frames.map((frameData: string) => \n        generateImageData(frameData, spriteSheet.palette)\n      );\n    }\n    this.tileSize = spriteSheet.size;\n  }\n}\n","export const hexToRgb = (hex: string) : number[] => {\n  // @ts-ignore\n  return hex.replace(\n    /^#?([a-f\\d])([a-f\\d])([a-f\\d])([a-f\\d])$/i,\n    (_, r, g, b, a) => '#' + r + r + g + g + b + b + a + a)\n    .substring(1)\n    .match(/.{2}/g)\n    .map(x => parseInt(x, 16)\n  );\n};\n\n\nexport type Color =\n'green0' | \n'green1' | \n'green2' | \n'green3' | \n'blue0' | \n'blue1' | \n'blue2' | \n'blue3' | \n'blue4' | \n'blue5' | \n'blue6' | \n'purple0' | \n'purple1' | \n'purple2' | \n'purple3' | \n'purple4' | \n'purple5' | \n'yellow0' | \n'yellow1' | \n'yellow2' | \n'black' | \n'white';\n\n// export const colors: Record<Color, string> = new Proxy({}, {\n//   get: (_, prop: string) => {\n//     if (typeof window === 'undefined' || typeof document === 'undefined') return '';\n//     const value = getComputedStyle(document.documentElement).getPropertyValue(`--${prop}`);\n//     return value.trim() || '';\n//   }\n// });\n\n// function getColorsFromCSS() {\n//   const root = document.documentElement;\n//   const computedStyle = getComputedStyle(root);\n  \n//   const colorKeys = [\n//     'green0', 'green1', 'green2', 'green3',\n//     'blue0', 'blue1', 'blue2', 'blue3', 'blue4', 'blue5', 'blue6',\n//     'purple0', 'purple1', 'purple2', 'purple3', 'purple4', 'purple5',\n//     'yellow0', 'yellow1', 'yellow2',\n//     'black', 'white'\n//   ];\n  \n//   const colors = {};\n//   colorKeys.forEach((key: string) => {\n//     // @ts-expect-error\n//     colors[key] = computedStyle.getPropertyValue(`--${key}`).trim();\n//   });\n  \n//   return colors;\n// }\n\nexport const colors: Record<Color, string> = {\n  green0: '#b3d7ad',\n  green1: '#7daf84',\n  green2: '#4c8568',\n  green3: '#396a50',\n  blue0: '#b4ecf3',\n  blue1: '#86bec6',\n  blue2: '#4e9ca6',\n  blue3: '#2f6269',\n  blue4: '#255056',\n  blue5: '#1f4347',\n  blue6: '#13282b',\n  purple0: '#e0b8d3',\n  purple1: '#d49bc2',\n  purple2: '#b34d92',\n  purple3: '#551641',\n  purple4: '#714162',\n  purple5: '#996a8a',\n  yellow0: '#fffef9',\n  yellow1: '#f2daab',\n  yellow2: '#e6a386',\n  black: '#13282b',\n  white: '#fffef9'\n};\n","// Auto-generated icon data\n// Generated on 2025-09-04T14:10:07.197Z\n\nimport { colors } from '@/core/util/color';\nimport { CatStates, VillagerStates } from './game-assets';\n\nexport const cat = {\n  size: 10,\n  frames: 4,\n  palette: [\n    colors.black,\n  ],\n  data: {\n    [CatStates.idle]: [\n      '@@@`@PJbcxpO|AQ@@',\n      '@@@`@DJbcxpO|AQ@@',\n      '@@@@h@nag|pG|AQ@@',\n      '@@@@@@z`SxxO|AQ@@'\n    ],\n    [CatStates.walk]: [\n      '@@@`@DJbcxpO|AR@@',\n      '@@@P@HJdCy`OpC`@@',\n      '@@@@@DJbCy`OxCR@@',\n      '@@@H@DJbcxpO|AA@@'\n    ],\n    [CatStates.run]: [\n      '@@@@@@@`ZxyO~@B@@',\n      '@@@@@@J`_|xG~@E@@',\n      '@@@@@@@`ZxyO~PB@@',\n      '@@@@@@J`CxG~@D@@'\n    ],\n    [CatStates.die]: [\n      '@@@@AHJdCy`OxCb@@',\n      '@@@@@@jcC`C@@@@@',\n      '@@@@@@@@@x|oxG@@@',\n      '@@@@@@@@@@@N~yC@'\n    ],\n    [CatStates.scratch]: [\n      '@@@`@DJbcxpO|AQ@@',\n      '@@@@@BPhHN|Ka@@@',\n      '@@@D@BEqQ\\\\xG~`P@@',\n      '@@@P@DJbcxpO|AQ@@'\n    ],\n    [CatStates.scared]: [\n      '@`@H@F`Wy_~GsPD@@',\n      '@`@H@B`Qy_~GwPD@@',\n      '@`@H@F`Wy_~GsPD@@',\n      '@`@H@B`Qy_~GwPD@@'\n    ],\n    [CatStates.sleep]: [\n      '@@@@@@@@@h~_~K@@@',\n      '@@@@@@@`Bx~_~E@@@',\n      '@@@@@@@`Bx}o~A@@@',\n      '@@@@@@@@@h|~C@@@'\n    ]\n  }\n};\n\nexport const villager = {\n  size: 8,\n  frames: 4,\n  palette: [\n    colors.purple0,\n    colors.blue6,\n  ],\n  data: {\n    [VillagerStates.walk]: [\n      'PUAUUQVVTUEUUajj`@B@`@',\n      '@@@TUPUUdeEUUQUUhjJH`@',\n      'PUAUUQVVTUEUUajj`@BH@@',\n      '@@@TUPUUdeEUUQUUhjJH`@'\n    ],\n    [VillagerStates.scared]: [\n      '@@@TUPUUTfEiiQUUhjJH`@',\n      '@@@UETUEeYQZZTUEjjBBH@',\n    ],\n  }\n};\n\nexport const statue = {\n  size: 16,\n  palette: [\n    colors.blue2,\n    colors.blue3,\n    colors.blue4,\n  ],\n  data: '@@@@@@@DD@@@`e@@@@jB@@@hJ@@@@O@@@@}A@@@xK@@@`o@@@p~N@@T{{E@TmoWAPUUUE@WUUu@|C@C@'\n};\n\nexport const obelisk = {\n  size: 16,\n  palette: [\n    colors.blue2,\n    colors.blue3,\n    colors.blue4,\n  ],\n  data: '@PUE@@`UUB@@VUI@@xo@@poC@@kjN@@l{@@p~C@@kjN@@|o@@p{~C@@{O@@|k@@pC@@|C@@@@@@@'\n};\n\nexport const oak = {\n  size: 16,\n  palette: [\n    colors.green3,\n    colors.green1,\n    colors.green0,\n  ],\n  data: '@@@@@@@UU@@@yF@@yoA@i~oZ@djjjAPjjjF@ijjZ@TjjZAPfiYF@eYYV@PYZV@@PUE@@@UU@@@PU@@@@@@@@'\n};\n\nexport const spruce = {\n  size: 16,\n  palette: [\n    colors.blue3,\n    colors.blue0,\n    colors.blue2\n  ],\n  data: '@@T@@@@dF@@@djA@@tk_@@tG@P_@P}E@]]@Twu]APw}]G@u]]W@P]_W@@PUE@@@UU@@@PU@@@@@@@@'\n};\n\nexport const grass = {\n  size: 16,\n  palette: [\n    colors.green2,\n    colors.green3,\n    colors.green1,\n  ],\n  data: '@U@T@PyEUSqmu}uMn_wuW{w]_WK^}mwmh}m_gPwuwmB]_WWBwu}]Oxnww~c~m_]OX_{]mP}mow@Vvj\\\\B`bB`B@'\n};\n\nexport const house = {\n  size: 16,\n  palette: [\n    colors.blue4,\n    colors.blue2,\n    colors.blue3\n  ],\n  data: 'PU@@@PjVUU@YyGdjWU]PkAm^UUGt_PWUUuA}GTUUUUpjjjjC[_ZUNlk}ypvgVgCkjZ_N|}}@'\n};\n","import { emojiToPixelArt } from '@/core/emoji';\nimport { NewTileset as NewTileset } from '@/core/tileset';\nimport { createCornerImage } from '@/core/util/image-generator';\nimport { generateImageData } from './sprite-loader';\nimport { cat, grass, house, oak, obelisk, spruce, statue, villager } from './sprites';\n\nexport const enum CatStates {\n  idle,\n  walk, \n  run,\n  die,\n  scratch,\n  scared,\n  sleep\n}\nexport const enum VillagerStates {\n  walk,\n  scared,\n} ;\n\nconst emoji = '🔥,🍀,🌼,🐓,🌷,🌹,👻,🥚,🍎'.split(',');\nexport const icons = emoji.map(e => emojiToPixelArt(e));\n\nexport class GameAssets {\n  static cat: NewTileset<CatStates>;\n  static villager: NewTileset<VillagerStates>;\n  static cornerImage: HTMLImageElement;\n  static oak: HTMLImageElement;\n  static spruce: HTMLImageElement;\n  static house: HTMLImageElement;\n  static grass: HTMLImageElement;\n  static statue: HTMLImageElement;\n  static obelisk: HTMLImageElement;\n\n  public static initialize() {\n    GameAssets.cat = new NewTileset<CatStates>(cat);\n    GameAssets.villager = new NewTileset<VillagerStates>(villager);\n    GameAssets.cornerImage = createCornerImage();\n    GameAssets.oak = generateImageData(oak.data, oak.palette);\n    GameAssets.spruce = generateImageData(spruce.data, spruce.palette);\n    GameAssets.house = generateImageData(house.data, house.palette);\n    GameAssets.grass = generateImageData(grass.data, grass.palette);\n    GameAssets.statue = generateImageData(statue.data, statue.palette);\n    GameAssets.obelisk = generateImageData(obelisk.data, obelisk.palette);\n  }\n}\n","import { colors } from './color';\nimport { createCanvasWithCtx } from './canvas';\n\n/**\n * Creates a 16x16 image with transparent background and colored corners\n * @param cornerColor The color to use for the 3x3 corner pixels\n * @returns HTMLImageElement ready to be used with drawImage\n */\nexport function createCornerImage(cornerColor: string = colors.purple4): HTMLImageElement {\n  // Create temporary canvas\n  const [canvas, ctx] = createCanvasWithCtx(16, 16);\n\n  // Clear to transparent\n  ctx.clearRect(0, 0, 16, 16);\n\n  // Set corner color\n  ctx.fillStyle = cornerColor;\n\n  // Draw 2x2 arrow corners (3 pixels each, 1 transparent)\n  \n  // Top-left corner arrow (pointing inward)\n  ctx.fillRect(0, 0, 1, 1); // top-left pixel\n  ctx.fillRect(1, 0, 1, 1); // top-right pixel  \n  ctx.fillRect(0, 1, 1, 1); // bottom-left pixel\n  // (1,1) is transparent\n  \n  // Top-right corner arrow (pointing inward)\n  ctx.fillRect(14, 0, 1, 1); // top-left pixel\n  ctx.fillRect(15, 0, 1, 1); // top-right pixel\n  ctx.fillRect(15, 1, 1, 1); // bottom-right pixel\n  // (14,1) is transparent\n  \n  // Bottom-left corner arrow (pointing inward)\n  ctx.fillRect(0, 14, 1, 1); // top-left pixel\n  ctx.fillRect(0, 15, 1, 1); // bottom-left pixel\n  ctx.fillRect(1, 15, 1, 1); // bottom-right pixel\n  // (1,14) is transparent\n  \n  // Bottom-right corner arrow (pointing inward)\n  ctx.fillRect(15, 14, 1, 1); // top-right pixel\n  ctx.fillRect(14, 15, 1, 1); // bottom-left pixel\n  ctx.fillRect(15, 15, 1, 1); // bottom-right pixel\n  // (14,14) is transparent\n\n  // Convert canvas to image\n  const img = new Image();\n  img.src = canvas.toDataURL();\n  \n  return img;\n}\n","import { hexToRgb, colors } from '@/core/util/color';\nimport { createCanvasWithCtx } from '@/core/util/canvas';\n\nexport const tinyFont = /* font-start */'6v7ic,6trd0,6to3o,6nvic,55eyo,2np50,2jcjo,3ugt8,34ao,7k,glc,1,opzc,3xdeu,3sapz,8rhfz,8ri26,1bzky,9j1ny,3ws2u,9dv9k,3xb1i,3xbmu,2t8g,2t8s,26ndv,ajmo,fl5ug,3x7nm,n75t,54br,59u0e,53if,rlev,4jrb,1yjk4,4eav,55q95,18zsz,mi3r,574tl,1aedd,ljn9,a1bd,4f1i,a1fs,549t,53ig,5832,1dwsh,6iw6,6ix0,cbsa,6gix,6fk4,aky7,7mbws,cvtyq,deehh,2sfi3'/* font-end */.split(',');\n\n// Character cache: charCode-color-size -> Canvas\nconst characterCanvases: { [key: string]: HTMLCanvasElement } = {};\n\nexport const FULL_HEART = '#';\nexport const TWO_THIRDS_HEART = '$';\nexport const ONE_THIRD_HEART = '%';\nexport const EMPTY_HEART = '&';\nexport const COLCHEIA = '*';\nexport const HOUSE = '^';\n\nexport const TELEPORT = '[';\nexport const SCRATCH = '\\\\';\nexport const MAGIC = ']';\n\nexport type DrawTextProps = {\n  text: string\n  x: number\n  y: number\n  color?: string\n  textAlign?: CanvasTextAlign\n  textBaseline?: CanvasTextBaseline\n  size?: number\n  space?: number\n}\n\nconst getCharacterData = (letter: string) => {\n  if (letter === '0') return { paddedBinary: '0'.repeat(25), leftmostCol: 0, charWidth: 5 };\n  \n  const paddedBinary = String(parseInt(letter, 36).toString(2)).padStart(25, '0');\n  let leftmostCol = 5;\n  let rightmostCol = -1;\n  \n  // Find leftmost and rightmost columns with set bits\n  for (let col = 0; col < 5; col++) {\n    for (let row = 0; row < 5; row++) {\n      const bitIndex = row * 5 + col;\n      if (paddedBinary[bitIndex] === '1') {\n        leftmostCol = Math.min(leftmostCol, col);\n        rightmostCol = Math.max(rightmostCol, col);\n      }\n    }\n  }\n  \n  const charWidth = rightmostCol >= leftmostCol ? rightmostCol - leftmostCol + 1 : 1;\n  return { paddedBinary, leftmostCol, charWidth };\n};\n\nconst getCharacterWidth = (letter: string): number => {\n  return getCharacterData(letter).charWidth;\n};\n\nconst createCharacterCanvas = (character: string, size: number, color: string): HTMLCanvasElement => {\n  const letter = character === ' ' ? '0' : tinyFont[character.charCodeAt(0) - 35];\n  const { paddedBinary, leftmostCol, charWidth } = getCharacterData(letter);\n  \n  const scaledWidth = charWidth * size;\n  const letterHeight = 5 * size;\n  \n  const [canvas, ctx] = createCanvasWithCtx(scaledWidth, letterHeight);\n  \n  const [r, g, b, a] = hexToRgb(color);\n  const fillStyle = `rgba(${r}, ${g}, ${b}, ${(a || 255) / 255})`;\n  \n  // Draw character bitmap\n  paddedBinary.split('').forEach((bit, bitIndex) => {\n    if (bit !== '0') {\n      const col = bitIndex % 5;\n      const row = Math.floor(bitIndex / 5);\n      \n      // Skip empty left columns\n      if (col < leftmostCol) return;\n      \n      const adjustedCol = col - leftmostCol;\n      \n      ctx.fillStyle = fillStyle;\n      ctx.fillRect(adjustedCol * size, row * size, size, size);\n    }\n  });\n\n  return canvas;\n};\n\nconst getCharacterCanvas = (character: string, size: number, color: string): HTMLCanvasElement => {\n  const cacheKey = `${character.charCodeAt(0)}-${color}-${size}`;\n  \n  if (!characterCanvases[cacheKey]) {\n    characterCanvases[cacheKey] = createCharacterCanvas(character, size, color);\n  }\n  \n  return characterCanvases[cacheKey];\n};\n\nexport const drawText = (\n  c: CanvasRenderingContext2D,\n  text: string,\n  x: number,\n  y: number,\n  color = colors.white,\n  textAlign = 0, // 0=left, 1=center, 2=right\n  textBaseline = 0, // 0=top, 1=middle, 2=bottom  \n  size = 2,\n  space = 1\n) => {\n  x = Math.round(x);\n  y = Math.round(y);\n  if (!text) text = ' ';\n  \n  // Calculate variable width for text\n  const spacing = space * size;\n  const characters = text.replace('!', '@').toUpperCase().split('');\n  \n  // Calculate positions and total width\n  let totalWidth = 0;\n  const charPositions: { char: string; x: number; charWidth: number }[] = [];\n  \n  characters.forEach((character, i) => {\n    const letter = character === ' ' ? '0' : tinyFont[character.charCodeAt(0) - 35];\n    const charWidth = getCharacterWidth(letter) * size;\n    \n    charPositions.push({ char: character, x: totalWidth, charWidth });\n    totalWidth += charWidth + (i < characters.length - 1 ? spacing : 0);\n  });\n  \n  const letterHeight = 5 * size;\n  const offsetX = textAlign === 0 ? 0 : textAlign === 1 ? Math.round(totalWidth / 2) : totalWidth;\n  const offsetY = textBaseline === 0 ? 0 : textBaseline === 1 ? Math.round(letterHeight / 2) : letterHeight;\n  \n  // Draw each character synchronously\n  charPositions.forEach(({ char, x: charX, charWidth }) => {\n    if (char === ' ') return; // Skip spaces\n    \n    const canvas = getCharacterCanvas(char, size, color);\n    c.drawImage(canvas, 0, 0, charWidth, letterHeight, x - offsetX + charX, y - offsetY, charWidth, letterHeight);\n  });\n};\n\n\n","import { GameAssets } from '@/game/game-assets';\nimport { drawText } from './font';\nimport { colors } from './util/color';\nimport { getCtx } from './util/canvas';\n\nconst makeCircle = (\n  ctx: CanvasRenderingContext2D,\n  centerX: number,\n  centerY: number,\n  radiusX: number,\n  radiusY: number,\n  skew = 0,\n) => {\n  // Draw ellipse using scaled circle algorithm\n  for (let y = -radiusY; y <= radiusY; y++) {\n    // Calculate the half-width at this y position using ellipse equation\n    const normalizedY = y / radiusY;\n    const halfWidth = Math.round(radiusX * Math.sqrt(1 - normalizedY * normalizedY));\n    \n    if (halfWidth > 0) {\n      const offset = Math.round(skew * Math.abs(y));\n      const currentY = centerY + y;\n      \n      if (y >= 0) {\n        ctx.rect(centerX - halfWidth - offset, currentY, halfWidth * 2, 1);\n      } else {\n        ctx.rect(centerX - halfWidth + offset, currentY, halfWidth * 2, 1);\n      }\n    }\n  }\n};\n\nclass DrawEngine {\n  ctx1: CanvasRenderingContext2D;\n  ctx2: CanvasRenderingContext2D;\n  ctx3: CanvasRenderingContext2D;\n  ctx4: CanvasRenderingContext2D;\n\n  // Canvas dimensions (cached for performance)\n  canvasWidth = 0;\n  canvasHeight = 0;\n\n  // Camera properties\n  cameraX = 0;\n  cameraY = 0;\n  zoom = 1;\n  targetCameraX = 0;\n  targetCameraY = 0;\n  targetZoom = 1;\n  cameraLerpSpeed = 0.08; // Adjust for faster/slower camera\n\n  constructor() {\n    this.ctx1 = getCtx(c1);\n    this.ctx2 = getCtx(c2);\n    this.ctx3 = getCtx(c3);\n    this.ctx4 = getCtx(c4);\n    GameAssets.initialize();\n    this.resizeCanvas();\n    window.addEventListener('resize', () => this.resizeCanvas());\n    window.addEventListener('orientationchange', () => this.resizeCanvas());\n  }\n\n  resizeCanvas() {\n    const aspectRatio = 4 / 3;\n    const gameWidth = 1200;\n    const gameHeight = Math.round(gameWidth / aspectRatio);\n    this.canvasWidth = gameWidth;\n    this.canvasHeight = gameHeight;\n    const ctxs: CanvasRenderingContext2D[] = [this.ctx1, this.ctx2, this.ctx3, this.ctx4];\n    for (const ctx of ctxs) {\n      // eslint-disable-next-line id-denylist\n      ctx.canvas.width = gameWidth;\n      // eslint-disable-next-line id-denylist\n      ctx.canvas.height = gameHeight;\n      ctx.imageSmoothingEnabled = false;\n    }\n  }\n\n  \n  // eslint-disable-next-line class-methods-use-this\n  drawCircumference(\n    ctx: CanvasRenderingContext2D,\n    centerX: number,\n    centerY: number,\n    radiusX: number,\n    radiusY: number,\n    color: string,\n    strokeWidth: number,\n  ) {\n    ctx.save();\n    ctx.beginPath();\n    makeCircle(ctx, centerX, centerY, radiusX, radiusY);\n    makeCircle(ctx, centerX, centerY, radiusX - strokeWidth, radiusY - strokeWidth);\n    ctx.clip('evenodd');\n    ctx.beginPath();\n    ctx.fillStyle = color;\n    ctx.fillRect(centerX - radiusX, centerY - radiusY, radiusX*2, radiusY*2);\n    ctx.fill();\n    ctx.restore();\n  }\n\n  drawText(\n    text: string,\n    x: number,\n    y: number,\n    color?: string,\n    textAlign = 0,\n    textBaseline = 0,\n    size = 2,\n    space = 1,\n    context?: CanvasRenderingContext2D\n  ) {\n    drawText(context || this.ctx1, text, x, y, color, textAlign, textBaseline, size, space);\n  }\n\n  static drawImage(\n    ctx: CanvasRenderingContext2D,\n    img: HTMLImageElement,\n    x: number,\n    y: number,\n    mirrored?: boolean,\n    imgWidth?: number,\n    imgWeight?: number,\n  ) {\n    if (mirrored) {\n      ctx.save();\n      ctx.scale(-1, 1);\n      x = -x - (imgWidth ?? img.width);\n    }\n    ctx.drawImage(\n      img,\n      x,\n      y,\n      imgWidth ?? img.width,\n      imgWeight ?? img.height,\n    );\n    if (mirrored) {\n      ctx.restore();\n    }\n  }\n\n  drawBackgroundImage(\n    img: HTMLImageElement,\n    x: number,\n    y: number,\n    mirrored?: boolean,\n    imgWidth?: number,\n    imgHeight?: number,\n  ) {\n    DrawEngine.drawImage(this.ctx1, img, x, y, mirrored, imgWidth, imgHeight);\n  }\n\n  /**\n   * Sets the camera position and zoom level.\n   * @param x The x-coordinate of the object where the camera should focus\n   * @param y The y-coordinate of the object where the camera should focus\n   * @param zoom The zoom level of the camera\n   */\n  setCamera(x: number, y: number, zoom: number = 1, immediate = false) {\n    this.targetCameraX = x;\n    this.targetCameraY = y;\n    this.targetZoom = zoom;\n    const cx = this.canvasWidth / 2 - 32;\n    const cy = this.canvasHeight / 2 - 64;\n    this.ctx1.setTransform(\n      this.zoom, 0, 0, this.zoom,\n      cx - this.cameraX * this.zoom,\n      cy - this.cameraY * this.zoom,\n    );\n    if (immediate) {\n      this.cameraX = x;\n      this.cameraY = y;\n      this.zoom = zoom;\n    }\n  }\n\n  updateCamera() {\n    this.cameraX += (this.targetCameraX - this.cameraX) * this.cameraLerpSpeed;\n    this.cameraY += (this.targetCameraY - this.cameraY) * this.cameraLerpSpeed;\n    this.zoom += (this.targetZoom - this.zoom) * this.cameraLerpSpeed;\n  }\n\n  resetCamera() {\n    this.ctx1.setTransform(1, 0, 0, 1, 0, 0);\n  }\n\n  clear() {\n    this.resetCamera();\n    this.ctx1.clearRect(0, 0, this.canvasWidth, this.canvasHeight);\n    this.ctx1.fillStyle = colors.green2;\n    this.ctx1.fillRect(0, 0, this.canvasWidth, this.canvasHeight);\n    this.ctx2.clearRect(0, 0, this.canvasWidth, this.canvasHeight);\n    this.ctx3.clearRect(0, 0, this.canvasWidth, this.canvasHeight);\n  }\n\n  /**\n   * Converts world coordinates to screen coordinates, accounting for camera transforms\n   * @param worldX World X coordinate\n   * @param worldY World Y coordinate\n   * @param zoom Current zoom level (defaults to 7, matching game state)\n   * @returns Screen coordinates { x, y }\n   */\n  worldToScreen(worldX: number, worldY: number, zoom: number = 7): { x: number; y: number } {\n    const cx = this.canvasWidth / 2 - 32;\n    const cy = this.canvasHeight / 2 - 64;\n\n    return {\n      x: cx + (worldX - this.cameraX) * zoom,\n      y: cy + (worldY - this.cameraY) * zoom\n    };\n  }\n}\n\nexport const drawEngine = new DrawEngine();\n","import { Circle, Path } from './types';\n\nexport const CELL_WIDTH = 12;\nexport const CELL_HEIGHT = 11;\n\nexport const MAX_LIVES = 9;\nexport const MAX_MAGIC = 6;\nexport const MAX_REPAIR = 20;\n\nexport const NOTIFICATION_DURATION = 5000;\n\nexport const paths: Path[] = [\n  // Main path\n  [\n    [69, 100, 3],\n    [76, 113, 4],\n    [89, 114, 5],\n    [104, 86, 3],\n    [99, 59, 3],\n    [85, 46, 2],\n    [86, 28, 2],\n    [74, 38, 2],\n    [60, 39, 2],\n    [48, 30, 2],\n    [46, 43, 2],\n    [38, 61, 3],\n    [50, 73, 4],\n    [38, 84, 3],\n    [46, 123, 3],\n    [36, 133, 2],\n    [48, 141, 3],\n    [94, 133, 4],\n    [113, 109, 5],\n    [122, 74, 6],\n    [113, 56, 0.9],\n  ],\n\n  // Smaller paths\n  [[45, 49, 0.9], [71, 51, 0.9]],\n\n  // Northwest village path\n  [[119, 54, 1], [129, 29, 1]],\n];\n\nexport const clearings: Circle[] = [\n  // Peak\n  { x: 64, y: 88, r: 6 },\n  { x: 75, y: 88, r: 6 },\n  { x: 69, y: 95, r: 6 },\n\n  // Northeast village\n  { x: 129, y: 28, r: 10 },\n\n  // Eye\n  { x: 71, y: 51, r: 3 },\n];\n\nexport const statues = {\n  heart: { x: 76, y: 84, name: 'heart' },\n  moon: { x: 129, y: 19, name: 'moon' },\n  ear: { x: 49, y: 29, name: 'ear' },\n  eye: { x: 71, y: 50, name: 'eye' },\n  foot: { x: 35, y: 131, name: 'foot' },\n  tail: { x: 114, y: 56, name: 'tail' },\n} as const;\n","import { CELL_WIDTH, CELL_HEIGHT } from '@/game/constants';\nimport { drawEngine } from './draw-engine';\nimport { updatePositionSmoothly, SmoothMovementState } from '../utils/smooth-movement';\n\ninterface Tileset<T extends (string | number)> {\n  animations: Record<T, HTMLImageElement[]>;\n  tileSize: number;\n}\n\nexport class GameObject<T extends (string | number)> implements SmoothMovementState {\n  animationTime = 0;\n  animationFrame = 0;\n  aD = 150; // Duration for each animation frame in milliseconds\n  animationLoop = true;\n  col: number;\n  row: number;\n  moving = { x: 0, y: 0 };\n  targetPos: { x: number; y: number };\n\n  constructor(\n    private readonly tileset: Tileset<T>,\n    public x: number,\n    public y: number,\n    public type: string,\n    public animation: T,\n    public speed: number = 0,\n    public mirrored: boolean = false,\n  ) {\n    this.col = Math.ceil(x / CELL_WIDTH);\n    this.row = Math.ceil(y / CELL_HEIGHT);\n    this.animationTime = Math.random() * this.aD;\n    this.targetPos = { x: this.x, y: this.y };\n  }\n\n  setPos(col: number, row: number) {\n    this.col = col;\n    this.row = row;\n    this.x = col * CELL_WIDTH;\n    this.y = row * CELL_HEIGHT;\n    this.targetPos = { x: this.x, y: this.y };\n  }\n\n  update(timeElapsed: number) {\n    if (!this.animationLoop && this.animationFrame === (this.tileset.animations[this.animation].length - 1)) {\n      return;\n    }\n    this.animationTime += timeElapsed;\n    this.animationFrame = Math.floor(this.animationTime / this.aD) % this.tileset.animations[this.animation].length;\n  }\n\n  updatePositionSmoothly(timeElapsed: number) {\n    updatePositionSmoothly(this, timeElapsed);\n    if (this.moving.x !== 0) {\n      this.mirrored = this.moving.x < 0;\n    }\n  }\n\n  draw() {\n    const animation = this.tileset.animations[this.animation];\n    if (animation[this.animationFrame]) {\n      drawEngine.drawBackgroundImage(\n        animation[this.animationFrame],\n        this.x - (this.tileset.tileSize - CELL_WIDTH) / 2,\n        this.y - (this.tileset.tileSize - CELL_HEIGHT) / 2,\n        this.mirrored,\n      );\n    }\n  }\n\n}\n","export const on = (event: number, listener: (detail: any) => void) => {\n  const eventName = String(event);\n  document.addEventListener(eventName, (e: Event) => {\n    listener((e as CustomEvent).detail);\n  });\n};\n\nexport const emit = (event: number, data?: any) => {\n  const eventName = String(event);\n  document.dispatchEvent(new CustomEvent(eventName, { detail: data }));\n};\n","import { colors } from '@/core/util/color';\nimport { CELL_HEIGHT, CELL_WIDTH } from '../constants';\n\nconst linePixels = (x0: number, y0: number, x1: number, y1: number): [number, number][] => {\n  const pixels: [number, number][] = [];\n  let dx = Math.abs(x1 - x0), sx = x0 < x1 ? 1 : -1;\n  let dy = -Math.abs(y1 - y0), sy = y0 < y1 ? 1 : -1;\n  let err = dx + dy, e2: number;\n\n  for (;;) {\n    pixels.push([x0, y0]);\n    if (x0 === x1 && y0 === y1) break;\n    e2 = 2 * err;\n    if (e2 >= dy) { err += dy; x0 += sx; }\n    if (e2 <= dx) { err += dx; y0 += sy; }\n  }\n  return pixels;\n};\n\nconst pentagramVertices = (cx: number, cy: number, pentagramRotation: number, radius: number): [number, number][] => {\n  const points: [number, number][] = [];\n  for (let i = 0; i < 5; i++) {\n    const angle = (2 * Math.PI * (i * 2 % 5)) / 5 - Math.PI / 2 + pentagramRotation;\n    const x = Math.round(cx + radius * Math.cos(angle));\n    const y = Math.round(cy + radius * Math.sin(angle));\n    points.push([x, y]);\n  }\n  return points;\n};\n\nconst _rotations = [Math.PI / 2, Math.PI, 3 * Math.PI / 2] as const;\n\nexport class PentagramAnimation {\n  cx: number;\n  cy: number;\n  allPixels: [number, number][];\n  totalDuration: number;\n\n  constructor(\n    public ctx: CanvasRenderingContext2D,\n    x: number,\n    y: number,\n    public animationDone: () => void,\n    private pentagramRotation: typeof _rotations[number] = Math.PI / 2,\n    private radius: number = 12,\n    private offset = 0,\n    private elapsed = 0,\n    private speed = 300,\n    private trailLength = 16,\n    private cycles = 0,\n    private maxCycles = 1,\n    private active = true,\n  ) {\n    this.cx = x + CELL_WIDTH / 2;\n    this.cy = y + CELL_HEIGHT / 2;\n\n    const points = pentagramVertices(this.cx, this.cy, pentagramRotation, radius);\n\n    this.allPixels = [];\n    for (let i = 0; i < 5; i++) {\n      const [x0, y0] = points[i];\n      const [x1, y1] = points[(i + 1) % 5];\n      this.allPixels.push(...linePixels(x0, y0, x1, y1));\n    }\n    this.totalDuration = this.allPixels.length * this.maxCycles * 1000 / this.speed;\n  }\n\n  update(timeElapsed: number): void {\n    if (!this.active) return;\n\n    const totalPixelsAdvanced = (this.elapsed / 1000) * this.speed;\n    const newOffset = Math.floor(totalPixelsAdvanced) % this.allPixels.length;\n    \n    // Check for cycle completion\n    if (newOffset < this.offset) {\n      this.cycles++;\n      if (this.cycles >= this.maxCycles) {\n        this.active = false;\n        this.animationDone();\n        return;\n      }\n    };\n    \n    this.offset = newOffset;\n    this.elapsed += timeElapsed;\n  }\n\n  draw(): void {\n    if (!this.active) return;\n\n    this.ctx.fillStyle = colors.white;\n    const effectiveTrailLength = Math.min(this.trailLength, this.offset);\n    \n    for (let i = 0; i < effectiveTrailLength; i++) {\n      const idx = (this.offset - i + this.allPixels.length) % this.allPixels.length;\n      const [x, y] = this.allPixels[idx];\n      this.ctx.fillRect(x, y, 1, 1);\n    }\n  }\n\n  isActive(): boolean {\n    return this.active;\n  }\n}\n","export const forEachSurroundingCell = (\n  centerCol: number,\n  centerRow: number,\n  callback: (col: number, row: number) => void,\n  includeCenter: boolean = false\n) => {\n  for (let deltaRow = -1; deltaRow <= 1; deltaRow++) {\n    for (let deltaCol = -1; deltaCol <= 1; deltaCol++) {\n      if (!includeCenter && deltaRow === 0 && deltaCol === 0) continue;\n      callback(centerCol + deltaCol, centerRow + deltaRow);\n    }\n  }\n};\n","\nconst t = (i: number, n: number)=>(n-i)/n;\n\n// Reuse a single AudioContext to avoid memory leaks\nlet audioCtx: AudioContext | null = null;\n\n// Sound player\nexport const playSound = (f: (i: number) => number) => {\n  if (!audioCtx) audioCtx = new AudioContext();\n  const m = audioCtx.createBuffer(1,96e3,48e3);\n  const b = m.getChannelData(0);\n  for(let i = 96e3; i--;) b[i] = f(i);\n  const s = audioCtx.createBufferSource();\n  s.buffer=m;\n  s.connect(audioCtx.destination);\n  s.start();\n};\n\n// Sound\n// export const ooof = (pitch: number) => playSound((i: number) => {\n//   var n=2e4;\n//   if (i > n) return 0;\n//   var q = t(i,n);\n//   return 0.2 * Math.tan(Math.cbrt(Math.sin(i/(145 - 5 * pitch))))*q*q;\n// });\n\n// export const doorSound = () => playSound((i: number) => {\n//   return 0.1 * Math.sin(i/50 + Math.random()*50) * (8000 - i%8000) / 5000 * Math.exp(-i/8000);\n// });\n\nexport const step = (length = 1) => playSound((i: number) => {\n  const n = 2e3 * length;\n  return i > n ? 0 : 0.15 * (Math.random() * 2 - 1) * Math.sin((Math.PI * i) / n);\n});\n\nexport const attack5 = () => playSound((i: number) => {\n  const n = 29e3;\n  if (i > n) return 0;\n  const decay = i > n * 0.6 ? Math.pow(0.9999, i - n * 0.6) : 1;\n  const phase = 5 * Math.sin(5 * Math.round(5 * i / n));\n  return decay * 0.2 * Math.sin(i/(30 - phase) + Math.random()) * (8000 - i%6000) / 5000;\n});\n\nexport const attack = () => playSound((i: number) => {\n  const n = 10e3;\n  if (i > n) return 0;\n  const phase = 5 * Math.sin(5 * Math.round(5 * i / n));\n  return Math.pow(0.998, i / 10) * 0.2 * Math.sin(i/(40 - phase) + Math.random()) * (8000 - i%6000) / 5000;\n});\n\nexport const repair = (pitch: number) => playSound((i: number) => {\n  return Math.sin(i/(21 - pitch) + Math.sin(i/2000)*5) * Math.exp(-i/4000) * (i/96000) * 9;\n});\n\nexport const hissAndSpit = () => playSound((i: number) => {\n  const n = 10e3;\n  if (i > n) return 0;\n  const q = (n - i) / n;\n  return ((Math.random() * 2 - 1) * Math.sin(i * 0.003) * 0.6 + Math.sin(i / (15 + Math.sin(i / 500) * 8)) * Math.exp(-i / 2000) * 0.4) * q * q * 0.3;\n});\n\nexport const heal = () => playSound((i: number) => {\n  const n = 6e3;\n  if (i > n) return 0;\n  var q = (n - i) / n;\n  return 0.5 * Math.sin(i*0.01*Math.sin(0.007*i+Math.sin(i/1200))+Math.sin(i/800))*q*q;\n});\n\nexport const exorcise = () => {\n  const x = ~(Math.random() * 1000);\n  return playSound((i: number) => {\n    return Math.sin(i/(10 + i/8000 - i/12000) & x + Math.sin(i/2000)*5) * Math.exp(-i/4000) * (i/96000) * 9;\n  });\n};\n","import { CatStates, GameAssets } from '@/game/game-assets';\nimport { GameObject } from '../../core/game-object';\nimport { controls } from '../../core/controls';\nimport { GameMap } from '../game-map';\nimport { CELL_HEIGHT, CELL_WIDTH, statues } from '../constants';\nimport { emit, on } from '@/core/event';\nimport { addTimeEvent } from '@/core/timer';\nimport { Spirit } from './spirit';\nimport { GameData } from '../game-data';\nimport { PentagramAnimation } from './pentagram-attack';\nimport { forEachSurroundingCell } from '../grid-utils';\nimport { drawEngine } from '@/core/draw-engine';\nimport { GameEvent } from '../event-manifest';\nimport { attack, attack5, step } from '@/core/audio';\n\nconst ANIMATION_SLOW = 600;\nconst ANIMATION_NORMAL = 150;\nconst ANIMATION_FAST = 75;\n\nconst STEP_SOUND_TIME = 200;\n\nexport class Player extends GameObject<CatStates> {\n  type = 'cat';\n  sleeping = true;\n  attacking = false;\n  scared = false;\n  inVillage = false;\n  pentagramAttack: PentagramAnimation | null = null;\n  stepSoundTimer = 0;\n\n  constructor(col: number, row: number, public map: GameMap, public gameData: GameData) {\n    super(\n      GameAssets.cat,\n      col * CELL_WIDTH,\n      row * CELL_HEIGHT,\n      'cat',\n      CatStates.sleep,\n      80,\n    );\n\n    this.aD = ANIMATION_SLOW;\n    \n    // Initialize looking direction to the right\n    this.map.playerLookingAt = { col: col + 1, row };\n\n    on(GameEvent.TELEPORT, () => {\n      this.setPos(statues.heart.x, statues.heart.y + 1);\n    });\n\n    on(GameEvent.WAKE_UP, () => {\n      this.sleeping = false;\n      this.aD = ANIMATION_NORMAL;\n    });\n\n    on(GameEvent.ATTACK_PLAYER, () => {\n      this.scared = true;\n      this.aD = ANIMATION_FAST;\n      addTimeEvent(() => {\n        this.aD = ANIMATION_NORMAL;\n        this.scared = false;\n      }, 600);\n    });\n\n    on(GameEvent.GAME_OVER, () => {\n      this.animation = CatStates.die;\n      this.animationTime = 0;\n      this.aD = ANIMATION_SLOW;\n      this.animationLoop = false;\n    });\n  }\n\n  update(timeElapsed: number) {\n    super.update(timeElapsed);\n\n    if (this.animation === CatStates.die) return;\n\n    if (this.animation == CatStates.run) {\n      this.stepSoundTimer -= timeElapsed;\n      if (this.stepSoundTimer <= 0) {\n        step();\n        this.stepSoundTimer = STEP_SOUND_TIME;\n      }\n    } else {\n      this.stepSoundTimer = 0;\n    }\n\n    const cellVillage = this.map.grid[this.row][this.col].village;\n    if (!this.inVillage && cellVillage) {\n      this.inVillage = true;\n      emit(GameEvent.ENTER_VILLAGE, cellVillage);\n    } else if (this.inVillage && !cellVillage) {\n      this.inVillage = false;\n    }\n\n    // DEBUG\n    coords.innerText = `${this.col},${this.row}`;\n\n    if (this.gameData.cutscene) {\n      return;\n    }\n    \n    if(this.scared && !this.isSurrounded()) {\n      this.animation = CatStates.scared;\n    } else if (this.sleeping) {\n      this.animation = CatStates.sleep;\n    } else if (this.attacking) {\n      this.animation = CatStates.scratch;\n    } else {\n      super.updatePositionSmoothly(timeElapsed);\n\n\n      if (!this.moving.y && controls.inputDirection.y) {\n        const newRow = this.row + controls.inputDirection.y;\n        \n        if (!this.map.grid[newRow][this.col].content) {\n          this.animation = CatStates.run;\n          this.moving.y = controls.inputDirection.y;\n          this.targetPos.y += controls.inputDirection.y * CELL_HEIGHT;\n          this.row = newRow;\n          // Update looking direction after movement to point ahead\n          this.map.playerLookingAt = { col: this.col, row: this.row + controls.inputDirection.y };\n        } else {\n          // Blocked movement - still update looking direction to attempted target\n          this.map.playerLookingAt = { col: this.col, row: this.row + controls.inputDirection.y };\n        }\n      }\n\n      if (!this.moving.x && controls.inputDirection.x) {\n        this.mirrored = controls.isLeft;\n        const newCol = this.col + controls.inputDirection.x;\n        \n        if (!this.map.grid[this.row][newCol].content) {\n          this.animation = CatStates.run;\n          this.moving.x = controls.inputDirection.x;\n          this.targetPos.x += controls.inputDirection.x * CELL_WIDTH;\n          this.col = newCol;\n          // Update looking direction after movement to point ahead  \n          this.map.playerLookingAt = { col: this.col + controls.inputDirection.x, row: this.row };\n        } else {\n          // Blocked movement - still update looking direction to attempted target\n          this.map.playerLookingAt = { col: this.col + controls.inputDirection.x, row: this.row };\n        }\n      }\n\n      if (!this.moving.x && !this.moving.y) {\n        this.animation = CatStates.idle;\n      }\n\n      // When not attacking, check if playerLookingAt is empty;\n      // If playerLookingAt is empty, look into 4 directions;\n      // If one of the directions is type spirit, set that direction as playerLookingAt;\n      // Else if one of the directions is a statue or obelisk, set that direction as playerLookingAt.\n      if (!this.attacking) {\n        this.autoSelectTarget();\n      }\n\n      if (!this.attacking && controls.isAction1 && !controls.previousState.isAction1) {\n        this.attacking = true;\n        this.animationTime = 0;\n\n        if (!this.pentagramAttack && this.isSurrounded()) {\n          console.log('pentagram start');\n          \n          this.pentagramAttack = new PentagramAnimation(\n            drawEngine.ctx1,\n            this.x,\n            this.y,\n            () => {\n              console.log('pentagram end');\n              this.pentagramAttack = null;\n              this.attackAllEnemiesAround();\n              this.attacking = false;\n              attack5();\n            },\n          );\n        } else {\n          // Check if there is an enemy right in front\n          addTimeEvent(() => this.attackEnemyInFront(), 500);\n          addTimeEvent(() => {\n            this.attacking = false;\n          }, this.aD * 5);\n        }\n      }\n    }\n    this.pentagramAttack?.update(timeElapsed);\n  }\n\n  // Deals 5 damage to all spirits\n  // in the 9 cells around the cat.\n  attackAllEnemiesAround() {\n    forEachSurroundingCell(this.col, this.row, (col, row) => {\n      const cell = this.map.grid[row][col];\n      if (cell.content?.type === 'spirit') {\n        const spirit = cell.content as Spirit;\n        spirit.takeDamage(5);\n      }\n    });\n  }\n\n  // Returns true if there are 3 or more spirits\n  // in the 9 cells around the cat.\n  isSurrounded() {\n    let spiritCount = 0;\n    forEachSurroundingCell(this.col, this.row, (col, row) => {\n      const cell = this.map.grid[row][col];\n      if (cell.content?.type === 'spirit') {\n        spiritCount++;\n      }\n    });\n    return spiritCount >= 3;\n  }\n\n  draw() {\n    super.draw();\n    this.pentagramAttack?.draw();\n  }\n\n  private autoSelectTarget() {\n    // Check if current looking position is empty\n    const currentCell = this.map.getLookingAt();\n    if (currentCell?.content) {\n      return; // Already looking at something\n    }\n\n    // Check 4 directions around player\n    const directions = [\n      { col: this.col + 1, row: this.row }, // right\n      { col: this.col - 1, row: this.row }, // left\n      { col: this.col, row: this.row + 1 }, // down\n      { col: this.col, row: this.row - 1 }, // up\n    ];\n\n    let spiritTarget = null;\n    let statueTarget = null;\n\n    for (const dir of directions) {\n      const cell = this.map.grid[dir.row][dir.col];\n      if (!cell.content) continue;\n\n      const contentType = cell.content.type;\n      \n      // Prioritize spirits first\n      if (contentType === 'spirit') {\n        spiritTarget = dir;\n        break; // Spirit has highest priority, stop searching\n      }\n      \n      // Store statue/obelisk as backup\n      if ((contentType === 'statue' || contentType === 'obelisk') && !statueTarget) {\n        statueTarget = dir;\n      }\n    }\n\n    // Set target based on priority: spirit > statue/obelisk\n    if (spiritTarget) {\n      this.map.playerLookingAt = spiritTarget;\n    } else if (statueTarget) {\n      this.map.playerLookingAt = statueTarget;\n    }\n  }\n\n  private attackEnemyInFront() {\n    // Check if there's a spirit at the target position\n    const cell = this.map.getLookingAt();\n    if (cell.content && cell.content.type === 'spirit') {\n      const spirit = cell.content as Spirit;\n      spirit.takeDamage(1);\n      attack();\n    } else if (cell.content && cell.content.type === 'field') {\n      cell.content = null;\n      step(3);\n    }\n  }\n}\n","import { CELL_HEIGHT, CELL_WIDTH } from '@/game/constants';\nimport { Drawable } from '@/game/Drawable';\nimport { drawEngine } from './draw-engine';\n\nexport class GameStaticObject implements Drawable {\n  public col: number;\n  public row: number;\n  public offsetX: number;\n  public offsetY: number;\n\n  constructor(\n    public img: HTMLImageElement,\n    public x: number,\n    public y: number,\n    public type: string,\n  ) {\n    this.col = Math.ceil(x / CELL_WIDTH);\n    this.row = Math.ceil(y / CELL_HEIGHT);\n    this.offsetX = x - Math.round((img.width - CELL_WIDTH) / 2);\n    this.offsetY = y - Math.round((img.height - CELL_HEIGHT) / 2);\n  }\n\n  draw() {\n    drawEngine.drawBackgroundImage(this.img, this.offsetX, this.offsetY);\n  }\n}\n","import { GameAssets } from '@/game/game-assets';\nimport { drawEngine } from '@/core/draw-engine';\nimport { CELL_WIDTH, CELL_HEIGHT } from '@/game/constants';\nimport { GameStaticObject } from '@/core/game-static-object';\n\nexport class Tree extends GameStaticObject {\n  private neighbors: { top: boolean; bottom: boolean; left: boolean; right: boolean } = {\n    top: false,\n    bottom: false,\n    left: false,\n    right: false,\n  };\n\n  constructor(\n    public x: number,\n    public y: number,\n    treeType: 'oak' | 'spruce',\n  ) {\n    super(\n      GameAssets[treeType],\n      x,\n      y,\n      treeType,\n    );\n  }\n\n  setNeighbors(neighbors: { top: boolean; bottom: boolean; left: boolean; right: boolean }) {\n    this.neighbors = neighbors;\n  }\n\n  draw() {\n    if (this.neighbors.right) {\n      drawEngine.drawBackgroundImage(this.img, Math.round(this.offsetX + CELL_WIDTH / 2), this.offsetY - CELL_HEIGHT / 2);\n    }\n    super.draw();\n  }\n}\n","// Seeded \"random\" number generator for deterministic randomness\nexport class SeededRandom {\n  constructor(public rngSeed: number = 47) {}\n  \n  next(): number {\n    this.rngSeed = (this.rngSeed * 9301 + 49297) % 233280;\n    return this.rngSeed / 233280;\n  }\n  \n  range(min: number, max: number): number {\n    return min + this.next() * (max - min);\n  }\n}\n","import { GameAssets } from '../game-assets';\nimport { CELL_HEIGHT, CELL_WIDTH } from '../constants';\nimport { GameStaticObject } from '@/core/game-static-object';\n\nexport class House extends GameStaticObject {\n  name;\n\n  constructor(col: number, row: number, name = '') {\n    super(\n      GameAssets.house,\n      col * CELL_WIDTH,\n      row * CELL_HEIGHT,\n      'house',\n    );\n    this.name = name;\n  }\n}\n","import { GameObject } from '@/core/game-object';\nimport { GameAssets, VillagerStates } from '../game-assets';\nimport { CELL_HEIGHT, CELL_WIDTH } from '../constants';\nimport { GameMap } from '../game-map';\nimport { emit } from '@/core/event';\nimport { GameEvent } from '../event-manifest';\n\nexport class Villager extends GameObject<VillagerStates> {\n  lastDirection: { x: number; y: number } | null = null;\n  moveTimer: number = 0;\n  moveInterval: number = 1000;\n  isScared = false;\n\n  constructor(col: number, row: number, private map: GameMap) {\n    super(\n      GameAssets.villager,\n      col * CELL_WIDTH,\n      row * CELL_HEIGHT,\n      'villager',\n      VillagerStates.walk,\n      10,\n    );\n  }\n\n  update(timeElapsed: number): void {\n    super.update(timeElapsed);\n\n    this.moveTimer += timeElapsed;\n    if (this.seesCat()) {\n      if (!this.isScared && this.moveTimer >= this.moveInterval) {\n        this.moveTimer = 0;\n        this.isScared = true;\n      }\n      if (this.moveTimer % (this.moveInterval / 5) < timeElapsed) {\n        emit(GameEvent.SCARED);\n      }\n      this.animation = VillagerStates.scared;\n      this.aD = 50;\n    } else {\n      this.isScared = false;\n      this.aD = 150;\n      if (this.moveTimer >= this.moveInterval) {\n        this.takeNextStep();\n        this.moveTimer = 0;\n      }\n      this.updatePositionSmoothly(timeElapsed);\n    }\n  }\n\n  // Looks around for an empty cell to move to.\n  // Has 50% chance of moving forward in the same direction as before.\n  // Otherwise moves in a random direction, if that direction is free. \n  takeNextStep(): void {\n    const directions = [\n      { x: 0, y: -1 },\n      { x: 0, y: 1 }, \n      { x: 1, y: 0 },\n      { x: -1, y: 0 }\n    ];\n\n    // 80% chance to continue in same direction\n    if (this.lastDirection && Math.random() < 0.8) {\n      const newCol = this.col + this.lastDirection.x;\n      const newRow = this.row + this.lastDirection.y;\n      if (this.isValidMove(newCol, newRow)) {\n        this.col = newCol;\n        this.row = newRow;\n        this.targetPos = { x: newCol * CELL_WIDTH, y: newRow * CELL_HEIGHT };\n        this.lastDirection = this.lastDirection;\n        this.animation = VillagerStates.walk;\n        return;\n      }\n    }\n\n    // Try random directions without shuffling\n    for (let i = 0; i < 10; i++) {\n      const dir = directions[Math.floor(Math.random() * 4)];\n      const newCol = this.col + dir.x;\n      const newRow = this.row + dir.y;\n      if (this.isValidMove(newCol, newRow)) {\n        this.col = newCol;\n        this.row = newRow;\n        this.targetPos = { x: newCol * CELL_WIDTH, y: newRow * CELL_HEIGHT };\n        this.lastDirection = dir;\n        this.animation = VillagerStates.walk;\n        return;\n      }\n    }\n  }\n\n  private isValidMove(col: number, row: number): boolean {\n    // Check if cell is empty\n    const cell = this.map.grid[row][col];\n    return cell.content === null;\n  }\n\n  /**\n   * Checks 2 cells in front in the movement direction for a cat.\n   */\n  seesCat(): boolean {\n    if (!this.lastDirection) return false;\n\n    for (let i = 1; i <= 2; i++) {\n      const checkCol = this.col + this.lastDirection.x * i;\n      const checkRow = this.row + this.lastDirection.y * i;\n      \n      const cell = this.map.grid[checkRow]?.[checkCol];\n      if (cell?.content?.type === 'cat') {\n        return true;\n      }\n    }\n\n    return false;\n  }\n}\n","import { CELL_HEIGHT, CELL_WIDTH } from '../constants';\nimport { GameStaticObject } from '@/core/game-static-object';\nimport { GameAssets } from '../game-assets';\n\nexport class Farm extends GameStaticObject {\n  constructor(col: number, row: number) {\n    super(\n      GameAssets.grass,\n      col * CELL_WIDTH,\n      row * CELL_HEIGHT,\n      'field',\n    );\n  }\n}\n","import { SeededRandom } from '@/core/util/rng';\nimport { House } from './house';\nimport { GameMap } from '../game-map';\nimport { Villager } from './villager';\nimport { Farm } from './farm';\n\nexport class Village {\n  houses: House[] = [];\n  farms: Farm[] = [];\n  villagers: Villager[] = [];\n\n  constructor(\n    public name: string,\n    public center: { x: number; y: number },\n    public radius: number,\n    public houseCount: number,\n    public population: number,\n  ) {\n    this.center = center;\n    this.radius = radius;\n  }\n\n  private generatePosition(rng: SeededRandom, existing: { x: number; y: number }[], map: GameMap): { x: number; y: number } {\n    let col: number;\n    let row: number;\n    do {\n      const angle = rng.range(0, Math.PI * 2);\n      const distance = rng.range(1, this.radius - 1);\n      col = Math.round(this.center.x + Math.cos(angle) * distance);\n      row = Math.round(this.center.y + Math.sin(angle) * distance);\n    } while (\n      col < 0 ||\n      row < 0 ||\n      map.get(col, row)?.content !== null ||\n      existing.some(item => item.x === col && item.y === row)\n    );\n    return { x: col, y: row };\n  }\n\n  generateHouses(rng: SeededRandom, map: GameMap): House[] {\n    for (let i = 0; i < this.houseCount; i++) {\n      const pos = this.generatePosition(rng, this.houses, map);\n      const houseCol = pos.x + pos.x % 2;\n      const houseRow = pos.y + pos.y % 2;\n      this.houses.push(new House(houseCol, houseRow));\n    }\n    return this.houses;\n  }\n\n  generateFarms(rng: SeededRandom, map: GameMap): Farm[] {\n    const farmCount = this.houseCount;\n    for (let i = 0; i < farmCount; i++) {\n      const pos = this.generatePosition(rng, this.farms, map);\n      \n      // Create a 2x2 farm block\n      for (let dx = 0; dx < 2; dx++) {\n        for (let dy = 0; dy < 2; dy++) {\n          this.farms.push(new Farm(pos.x + dx, pos.y + dy));\n        }\n      }\n    }\n    return this.farms;\n  }\n\n  generateVillagers(rng: SeededRandom, map: GameMap): Villager[] {\n    for (let i = 0; i < this.population; i++) {\n      const pos = this.generatePosition(rng, this.farms, map);\n      this.villagers.push(new Villager(pos.x, pos.y, map));\n    }\n    return this.villagers;\n  }\n}\n","import { drawEngine } from '@/core/draw-engine';\nimport { CELL_HEIGHT, CELL_WIDTH } from '../constants';\n\nexport class Icon {\n  x: number;\n  y: number;\n\n  constructor(\n    public readonly icon: HTMLImageElement,\n    public col: number,\n    public row: number,\n    public type: string,\n  ) {\n    this.x = Math.round(this.col * CELL_WIDTH + (CELL_WIDTH - this.icon.width) / 2);\n    this.y = Math.round(this.row * CELL_HEIGHT + (CELL_HEIGHT - this.icon.height) / 2);\n  }\n\n  draw() {\n    drawEngine.drawBackgroundImage(this.icon, this.x, this.y);\n  }\n}\n","import { Cell } from './types';\n\nexport interface Coords {\n  col: number;\n  row: number;\n}\n\nexport interface Position {\n  x: number;\n  y: number;\n}\n\nexport interface PathNode {\n  pos: Position;\n  distance: number;\n  previous?: PathNode;\n}\n\n// Directions: north, south, east, west\nconst directions: ReadonlyArray<Readonly<{ x: number; y: number }>> = [\n  { x: 0, y: -1 }, // north\n  { x: 0, y: 1 },  // south\n  { x: 1, y: 0 },  // east\n  { x: -1, y: 0 }  // west\n] as const;\n\n/**\n * Breadth-first search to find the nearest cell that matches a condition\n * @param grid - 2D array representing the game map\n * @param start - Starting position {x, y}\n * @param matchCondition - Function that returns true if the cell satisfies the condition\n * @param maxSteps - Maximum number of steps to search\n * @returns The position of the matching cell, or null if not found\n */\nexport function findNearestMatch<T>(\n  grid: T[][],\n  start: Position,\n  matchCondition: (cell: T, x: number, y: number) => boolean,\n  maxSteps: number\n): Position | null {\n  const rowCount = grid.length;\n  const colCount = grid[0]?.length || 0;\n\n  if (colCount === 0 || rowCount === 0) return null;\n\n  // Check if starting position matches\n  if (matchCondition(grid[start.y][start.x], start.x, start.y)) {\n    return start;\n  }\n\n  const visited = new Set<string>();\n  const queue: PathNode[] = [{ pos: start, distance: 0 }];\n  visited.add(`${start.x},${start.y}`);\n\n  while (queue.length > 0) {\n    const current = queue.shift()!;\n\n    // Check all 4 directions\n    for (const dir of directions) {\n      const newX = current.pos.x + dir.x;\n      const newY = current.pos.y + dir.y;\n      const newDistance = current.distance + 1;\n\n      // Check max steps only\n      if (newDistance > maxSteps) {\n        continue;\n      }\n\n      const key = `${newX},${newY}`;\n      if (visited.has(key)) {\n        continue;\n      }\n\n      visited.add(key);\n\n      // Check if this cell matches our condition\n      if (matchCondition(grid[newY][newX], newX, newY)) {\n        return { x: newX, y: newY };\n      }\n\n      // Add to queue for further exploration\n      queue.push({\n        pos: { x: newX, y: newY },\n        distance: newDistance,\n        previous: current\n      });\n    }\n  }\n\n  return null; // No matching cell found within maxSteps\n}\n\nconst toKey = (col: number, row: number) => {\n  return `${col},${row}`;\n};\n\n// const fromKey = (key): Coords => {\n//   const [col ,row] = key.split(',').map(Number);\n//   return { col, row };\n// };\n\nconst reconstructPath = (parents: Record<string, Coords>, start: Coords, goal: Coords) => {\n  const path: Coords[] = [];\n  let current = goal;\n  while (current != start) {\n    path.unshift(current);\n    current = parents[toKey(current.col, current.row)];\n  }\n  path.unshift(start);\n  return path;\n};\n\n/**\n * Uses breadth-first-search to find the shortest path from\n * start to goal, and returns the path as an array of coords.\n * The path will take at most maxSteps steps.\n * This algo assumes that the map is fully enclosed by a boundary\n * so it is not checking whether the coordinates are valid.\n */\nexport const findShortestPath = (\n  grid: Cell[][],\n  start: Coords,\n  goal: Coords,\n  maxSteps = 100,\n) => {\n  let steps = maxSteps;\n\n  // Start from person A’s position.\n  // Keep a queue of cells to explore.\n  const queue: Coords[] = [start];\n\n  // Keep a record of which cells you’ve already visited, so you don’t loop back.\n  const visited = new Set();\n\n  // Keep a map of coords->cells that keeps track of the paths taken\n  const parents: Record<string, Coords> = {};\n\n  while (queue.length !== 0 && steps--) {\n    // Get the oldest cell from the queue\n    const current = queue.shift() as Coords;\n    if (current.col === goal.col && current.row === goal.row) {\n      return reconstructPath(parents, start, goal);\n    }\n\n    // Check the 4 immediate neighbours\n    const neighbours = directions.map(({x, y}) => grid[current.row + y][current.col + x]);\n    neighbours.forEach((neighbour) => {\n      if (!visited.has(neighbour)) {\n        visited.add(neighbour);\n        if (neighbour.content === null || (neighbour.x == goal.col && neighbour.y == goal.row)) {\n          parents[toKey(neighbour.x, neighbour.y)] = current;\n          queue.push({ col: neighbour.x, row: neighbour.y });\n        }\n      }\n    });\n  }\n};\n\n","import { drawEngine } from '@/core/draw-engine';\nimport { colors } from '@/core/util/color';\nimport { CELL_WIDTH } from '../constants';\n\nconst defaultColors: [string, string, string, string] = [colors.blue1, colors.blue2, colors.purple5, colors.purple4];\n\nexport const drawHpBar = (\n  hp: number,\n  maxHp: number,\n  x: number,\n  y: number,\n  colorHP = defaultColors,\n) => {\n  const hpRatio = Math.max(0, Math.min(1, hp / maxHp));\n  const barWidth = CELL_WIDTH;\n  const barHeight = 1;\n  const hpWidth = Math.ceil(barWidth * hpRatio);\n  const barX = x;\n  const barY = y - 5;\n\n  drawEngine.ctx1.fillStyle = colorHP[0];\n  drawEngine.ctx1.fillRect(barX, barY, hpWidth, barHeight);\n  drawEngine.ctx1.fillStyle = colorHP[1];\n  drawEngine.ctx1.fillRect(barX, barY + 1, hpWidth, barHeight);\n\n  drawEngine.ctx1.fillStyle = colorHP[2];\n  drawEngine.ctx1.fillRect(\n    barX + hpWidth,\n    barY,\n    barWidth - hpWidth,\n    barHeight,\n  );\n  drawEngine.ctx1.fillStyle = colorHP[3];\n  drawEngine.ctx1.fillRect(\n    barX + hpWidth,\n    barY +\n    1,\n    barWidth - hpWidth, barHeight,\n  );\n};\n","import { emojiToPixelArt } from '@/core/emoji';\nimport { Icon } from './icon';\nimport { drawEngine } from '@/core/draw-engine';\nimport { CELL_HEIGHT, CELL_WIDTH } from '../constants';\nimport { GameMap } from '../game-map';\nimport { updatePositionSmoothly, SmoothMovementState, setTargetPosition } from '@/utils/smooth-movement';\nimport { Coords, findShortestPath } from '../path-findind';\nimport { addTimeEvent } from '@/core/timer';\nimport { emit } from '@/core/event';\nimport { drawHpBar } from './hp-bar';\nimport { GameEvent } from '../event-manifest';\nimport { exorcise } from '@/core/audio';\n\nexport type SpiritType = '☁️' | '👻' | '👹' | '🧿' | '🦀' | '🌵' | '🥨' | '🧚🏻‍♀️' | '💀';\n\ninterface SpiritSpecies {\n  type: SpiritType,\n  icon: HTMLImageElement,\n  level: number,\n}\n\nexport const spirits = ([\n  '☁️', '🥨', '🌵', '🧚🏻‍♀️', '🦀', '👻', '👹', '🧿', '💀'\n] as const).reduce<Record<SpiritType, SpiritSpecies>>((acc, type, index) => {\n  acc[type] = { icon: emojiToPixelArt(type), type, level: Math.ceil((index) / 2) };\n  return acc;\n}, {} as Record<SpiritType, SpiritSpecies>);\n\nconst enum SpiritState {\n  IDLE,\n  MOVING,\n  WINDING,\n  ATTACKING,\n  RESTING\n}\n\nexport class Spirit extends Icon implements SmoothMovementState {\n\n  aD = 2000;\n  animationTime = 0;\n  opacity = 0;\n  species: SpiritSpecies;\n  map: GameMap;\n  searchRadius = 9;\n  moveTimer = 0;\n  moveInterval = 600;\n  targetPos: { x: number; y: number };\n  moving = { x: 0, y: 0 };\n  speed = 20;\n  maxHp: number;\n  hp: number;\n  dead = false;\n  recoil = false;\n  \n  // Simplified state system\n  state: number = SpiritState.IDLE;\n  attackTimer = 0;\n  attackDuration = 1000;\n  attackTarget: Coords | null = null;\n  attackOffsetX = 0;\n  attackOffsetY = 0;\n\n  constructor(\n    col: number,\n    row: number,\n    type: SpiritType,\n    map: GameMap,\n  ) {\n    super(spirits[type].icon, col, row, 'spirit');\n    this.species = spirits[type];\n    this.map = map;\n    this.targetPos = { x: this.x, y: this.y };\n    this.maxHp = Math.round(Math.pow(1.5, this.species.level + 1));\n    this.hp = this.maxHp;\n  }\n\n  update(timeElapsed: number) {\n    if (this.hp <= 0) return;\n\n    this.animationTime += timeElapsed * Math.pow(this.species.level + 0.5, 2);\n    if (this.opacity < 1) {\n      this.opacity += timeElapsed / this.aD;\n    }\n    if (this.animationTime >= this.aD) {\n      this.animationTime -= this.aD;\n    }\n\n    switch (this.state) {\n      case SpiritState.IDLE:\n      case SpiritState.MOVING:\n        updatePositionSmoothly(this, timeElapsed);\n        const playerCoords = this.lookAroundForPlayer();\n        if (playerCoords) {\n          this.moveTimer += timeElapsed;\n          if (this.moveTimer >= this.moveInterval) {\n            this.moveTowardsPlayer(playerCoords);\n            this.moveTimer = 0;\n          }\n        }\n        break;\n\n      case SpiritState.WINDING:\n      case SpiritState.ATTACKING:\n      case SpiritState.RESTING:\n        this.updateAttack(timeElapsed);\n        break;\n    }\n  }\n\n  private updateAttack(timeElapsed: number) {\n    this.attackTimer += timeElapsed;\n    const progress = this.attackTimer / this.attackDuration;\n    \n    if (!this.attackTarget) {\n      this.state = SpiritState.IDLE;\n      return;\n    }\n\n    const dirX = this.attackTarget.col - this.col;\n    const dirY = this.attackTarget.row - this.row;\n\n    if (progress < 0.7) {\n      // Winding up\n      if (this.state !== SpiritState.WINDING) this.state = SpiritState.WINDING;\n      const windProgress = progress / 0.7;\n      this.attackOffsetX = -dirX * windProgress * 3;\n      this.attackOffsetY = -dirY * windProgress * 3;\n    } else if (progress < 0.73) {\n      // Attacking\n      if (this.state !== SpiritState.ATTACKING) this.state = SpiritState.ATTACKING;\n      const attackProgress = (progress - 0.7) / 0.03;\n      this.attackOffsetX = dirX * (-3 + CELL_WIDTH * attackProgress);\n      this.attackOffsetY = dirY * (-3 + CELL_WIDTH * attackProgress);\n    } else if (progress < 1.0) {\n      // Resting (returning)\n      if (this.state !== SpiritState.RESTING) {\n        this.state = SpiritState.RESTING;\n        \n        // Only emit if player is still in the target cell\n        const cell = this.map.grid[this.attackTarget.row][this.attackTarget.col];\n        if (cell.content?.type === 'cat') {\n          emit(GameEvent.ATTACK_PLAYER, this.species.level);\n        }\n      }\n      const restProgress = (progress - 0.73) / 0.27;\n      this.attackOffsetX = dirX * 3 * (1 - restProgress);\n      this.attackOffsetY = dirY * 3 * (1 - restProgress);\n    } else {\n      // Attack complete\n      this.state = SpiritState.IDLE;\n      this.attackTimer = 0;\n      this.attackTarget = null;\n      this.attackOffsetX = 0;\n      this.attackOffsetY = 0;\n    }\n  }\n\n  private lookAroundForPlayer(): Coords | null {\n    // Search in a box around the spirit using the search radius\n    for (let dx = -this.searchRadius; dx <= this.searchRadius; dx++) {\n      for (let dy = -this.searchRadius; dy <= this.searchRadius; dy++) {\n        const searchCol = this.col + dx;\n        const searchRow = this.row + dy;\n\n        const cell = this.map.grid[searchRow][searchCol];\n        if (cell.content?.type === 'cat') {\n          return { col: searchCol, row: searchRow };\n        }\n      }\n    }\n    \n    return null;\n  }\n\n  private moveTowardsPlayer(playerCoords: Coords) {\n    const path = findShortestPath(\n      this.map.grid,\n      { col: this.col, row: this.row },\n      playerCoords,\n    );\n    if (path && path.length > 2) {\n      this.state = SpiritState.MOVING;\n      const nextStep = path[1];\n      setTargetPosition(this, nextStep.col, nextStep.row);\n      this.col = nextStep.col;\n      this.row = nextStep.row;\n      this.targetPos.x = nextStep.col * CELL_WIDTH;\n      this.targetPos.y = nextStep.row * CELL_HEIGHT;\n    } else if (path?.length === 2) {\n      // Start attack\n      this.state = SpiritState.WINDING;\n      this.attackTarget = path[1];\n      this.attackTimer = 0;\n    }\n  }\n\n  draw() {\n    const phase = Math.sin((this.animationTime / this.aD) * 2 * Math.PI);\n    drawEngine.ctx1.save();\n    drawEngine.ctx1.globalAlpha = this.opacity;\n\n    // Shadow\n    const shadow = Math.round(2 + 1 * phase) / 10;\n    drawEngine.ctx1.fillStyle = `rgba(0,0,0,${shadow})`;\n    drawEngine.ctx1.fillRect(\n      this.x + 3 + this.attackOffsetX,\n      this.y + CELL_HEIGHT * 3 / 4 + this.attackOffsetY,\n      this.icon.width - 6,\n      CELL_HEIGHT / 4 + 1,\n    );\n\n    if (this.hp < this.maxHp) {\n      drawHpBar(this.hp, this.maxHp, this.x, this.y);\n    }\n\n    // Icon\n    drawEngine.ctx1.save();\n    if (this.recoil) {\n      drawEngine.ctx1.filter = 'sepia(1) saturate(2) hue-rotate(260deg) brightness(0.7)';\n    }\n    drawEngine.ctx1.translate(\n      this.attackOffsetX,\n      this.attackOffsetY + Math.round(\n        (phase - 1) * 2\n      )\n    );\n    super.draw();\n    drawEngine.ctx1.restore();\n    drawEngine.ctx1.restore();\n  }\n\n  takeDamage(damage: number = 1): boolean {\n    this.hp -= damage;\n    this.recoil = true;\n    addTimeEvent(() => {\n      this.recoil = false;\n    }, 150);\n    if (this.hp <= 0) {\n      addTimeEvent(() => {\n        exorcise();\n        this.dead = true;\n      }, 1500);\n    }\n    return this.hp <= 0;\n  }\n}\n","/* eslint-disable max-classes-per-file */\nimport { GameAssets } from '../game-assets';\nimport { CELL_HEIGHT, CELL_WIDTH, MAX_REPAIR } from '../constants';\nimport { Spirit, spirits } from './spirit';\nimport { GameMap } from '../game-map';\nimport { GameData } from '../game-data';\nimport { drawHpBar } from './hp-bar';\nimport { colors } from '@/core/util/color';\nimport { drawEngine } from '@/core/draw-engine';\nimport { GameStaticObject } from '@/core/game-static-object';\n\nexport class Statue extends GameStaticObject {\n  static readonly State = {\n    BROKEN: 0,\n    ANIMATING: 1,\n    REPAIRED: 2\n  } as const;\n\n  spirits: Spirit[] = [];\n  maxSpirits = 4;\n  spawnTimer = 0;\n  spawnInterval = 1000;\n  spawnChance = 0.10;\n  spawnRadius = 10;\n  repair = 0;\n  state: number = Statue.State.BROKEN;\n  animationTime = 0;\n  repairD = 1500;\n  repairAnimationTimer = 0;\n  spiritsExorcised = false;\n  lastClearTime = 0;\n\n  /**\n   * Animation duration\n   */\n  aD = 800;\n\n  constructor(\n    col: number,\n    row: number,\n    public map: GameMap,\n    public gameData: GameData,\n    public name: string,\n  ) {\n    super(\n      GameAssets.statue,\n      col * CELL_WIDTH,\n      row * CELL_HEIGHT,\n      'statue',\n    );\n  }\n\n  updateAnimation(timeElapsed: number) {\n    this.animationTime += timeElapsed;\n  }\n\n  update(timeElapsed: number) {\n    this.spawnTimer += timeElapsed;\n\n    if (this.state === Statue.State.BROKEN && this.repair >= MAX_REPAIR) {\n      this.state = Statue.State.ANIMATING;\n      this.spiritsExorcised = false; // Reset flag when starting animation\n      this.lastClearTime = 0; // Reset clear timer\n    } else if (this.state === Statue.State.ANIMATING) {\n      this.repairAnimationTimer += timeElapsed;\n      if (this.repairAnimationTimer > this.repairD) {\n        this.state = Statue.State.REPAIRED;\n      }\n    }\n    \n    if (this.spawnTimer >= this.spawnInterval) {\n      this.spawnTimer = 0;\n\n      if (Math.random() < this.spawnChance) {\n        if (this.spirits.length < (this.maxSpirits + this.gameData.getLevel())) {\n          // Spawn new spirit\n          this.spawnSpirit();\n        } else if (this.spirits.length > 0) {\n          // Replace spirits with full HP\n          const replaceSpirit = this.spirits\n            .filter((spirit) => spirit.hp === spirit.maxHp)\n            [Math.round(Math.random() * this.spirits.length - 1)];\n          if (replaceSpirit) {\n            replaceSpirit.dead = true;\n            this.spawnSpirit();\n          }\n        }\n      }\n    }\n\n    this.spirits = this.spirits.filter(spirit => !spirit.dead);\n  }\n\n  draw() {\n    super.draw();\n    if (this.repair > 0 && this.repair < MAX_REPAIR) {\n      drawHpBar(this.repair, MAX_REPAIR, this.x, this.y, [colors.yellow1, colors.yellow2, colors.blue5, colors.blue6]);\n    }\n    if (this.state === Statue.State.REPAIRED) {\n      this.drawFaries();\n    }\n  }\n\n  postDraw() {\n    if (this.state === Statue.State.ANIMATING) {\n      this.drawAnimation();\n    }\n  }\n\n  drawFaries() {\n    const radius = 3;\n    drawEngine.ctx1.fillStyle = colors.purple0;\n    \n    for (let i = 0; i < 5; i++) {\n      const t = (this.animationTime + this.aD * 0.5 * i) / this.aD;\n      const theta = (i * 2 * Math.PI) / 3; // 0, 120°, 240°\n      // Offset distance from statue center\n      const offsetDist = 3; // adjust as needed\n      const offsetX = Math.cos(theta) * offsetDist;\n      const offsetY = Math.sin(theta) * offsetDist;\n\n      // Infinity path at t, rotated by theta\n      const x0 = radius * 2 * Math.sin(t);\n      const y0 = radius * Math.sin(2 * t);\n      const x = x0 * Math.cos(theta) - y0 * Math.sin(theta);\n      const y = x0 * Math.sin(theta) + y0 * Math.cos(theta);\n\n      // Final position: statue center + offset + rotated path\n      const px = Math.round(this.x + CELL_WIDTH / 2 + offsetX + x);\n      const py = Math.round(this.y + CELL_HEIGHT / 3 + offsetY + y);\n\n      drawEngine.ctx1.fillRect(px, py, 1, 1);\n    }\n  }\n\n  drawAnimation() {\n    const animationProgress = (3 * this.repairAnimationTimer / this.repairD) % 1;\n    \n    const maxWidth = c2.width / drawEngine.zoom;\n    const maxHeight = c2.height / drawEngine.zoom;\n    const cx = this.x + CELL_WIDTH / 2;\n    const cy = this.y + CELL_HEIGHT / 2;\n    const rx = maxWidth * animationProgress;\n    const ry = maxHeight * animationProgress;\n    drawEngine.drawCircumference(\n      drawEngine.ctx1,\n      cx,\n      cy,\n      rx,\n      ry,\n      colors.white,\n      8,\n    );\n    \n    if (this.repairAnimationTimer - this.lastClearTime >= 20) {\n      const progress = this.repairAnimationTimer / this.repairD;\n      this.map.clearCircleWithJitter(this.col, this.row, 20 * progress, true, 2, 0.3);\n      this.lastClearTime = this.repairAnimationTimer;\n    }\n    \n    // Only exorcise spirits once at the beginning of the animation\n    if (!this.spiritsExorcised) {\n      this.spirits.forEach(spirit => spirit.takeDamage(spirit.hp));\n      this.spiritsExorcised = true;\n    }\n  }\n\n  private spawnSpirit() {\n    // Find a random empty cell within a 20x20 area around the statue\n    const emptyCells: { x: number; y: number }[] = [];\n    const spawnRadius = Math.round(this.gameData.getLevel() + this.spawnRadius);\n    \n    // Collect all empty cells within the search radius\n    for (let dx = -spawnRadius; dx <= spawnRadius; dx++) {\n      for (let dy = -spawnRadius; dy <= spawnRadius; dy++) {\n        const x = this.col + dx;\n        const y = this.row + dy;\n        \n        // Check if cell is empty\n        if (this.map.grid[y][x].content === null) {\n          emptyCells.push({ x, y });\n        }\n      }\n    }\n\n    // Select a random empty cell\n    if (emptyCells.length > 0) {\n      const randomIndex = Math.floor(Math.random() * emptyCells.length);\n      const selectedPosition = emptyCells[randomIndex];\n      \n      // TODO: only spawn spirits of the appropriate level for the current game\n      const spiritTypes = Object.values(spirits)\n        .filter((spirit) => spirit.level < this.gameData.getLevel());\n      if (spiritTypes.length === 0) return;\n\n      const randomType = spiritTypes[Math.floor(Math.random() * spiritTypes.length)];\n      \n      const spirit = new Spirit(selectedPosition.x, selectedPosition.y, randomType.type, this.map);\n      this.spirits.push(spirit);\n      \n      // Place the spirit directly in the map\n      this.map.set(selectedPosition.x, selectedPosition.y, spirit);\n    }\n  }\n}\n","import { Tree } from './entities/tree';\nimport { SeededRandom } from '@/core/util/rng';\nimport { Village } from './entities/village';\nimport { CELL_HEIGHT, CELL_WIDTH, clearings, paths, statues } from './constants';\nimport { Statue } from './entities/statue';\nimport { Cell, Path } from './types';\nimport { Drawable } from './Drawable';\nimport { on } from '@/core/event';\nimport { Spirit } from './entities/spirit';\nimport { Coords } from './path-findind';\nimport { drawEngine } from '@/core/draw-engine';\nimport { GameAssets } from './game-assets';\nimport { GameData } from './game-data';\nimport { GameEvent } from './event-manifest';\nimport { Farm } from './entities/farm';\nimport { forEachSurroundingCell } from './grid-utils';\nimport { House } from './entities/house';\n\nexport class GameMap {\n  grid: Cell[][];\n  villages: Village[] = [];\n  private rng: SeededRandom;\n  playerLookingAt: Coords = { col: 0, row: 0 };\n\n  constructor(\n    public readonly colCount: number,\n    public readonly rowCount: number,\n    public gameData: GameData,\n  ) {\n    this.rng = new SeededRandom();\n\n    this.grid = Array.from({ length: rowCount }, (_a, y) =>\n      Array.from({ length: colCount }, (_b, x) => {\n        // Determine tree species based on distance from Heart Peak (70, 90)\n        const dx = x - 70;\n        const dy = y - 90;\n        const distanceFromHeartPeak = Math.sqrt(dx * dx + dy * dy);\n        \n        let treeType: 'oak' | 'spruce';\n        if (distanceFromHeartPeak <= 40) {\n          // Within 20 cell radius of Heart Peak: 90% spruce, 10% oak\n          treeType = this.rng.next() < 0.9 ? 'spruce' : 'oak';\n        } else {\n          // Rest of map: 20% spruce, 80% oak\n          treeType = this.rng.next() < 0.2 ? 'spruce' : 'oak';\n        }\n        \n        const tree = new Tree(\n          x * CELL_WIDTH - (16 - CELL_WIDTH) / 2, // Adjust x to center the image\n          y * CELL_HEIGHT - (16 - CELL_HEIGHT) / 2, // Adjust y to center the image\n          treeType\n        );\n        return { x, y, content: tree };\n      })\n    );\n\n    this.villages = [\n      new Village('Heart Peak', { x: 70, y: 90 }, 12, 0, 0),\n      new Village('Pine Rest', { x: 99, y: 100 }, 6, 2, 3),\n      new Village('Oak Branch', { x: 42, y: 51 }, 4, 3, 4),\n      new Village('Cat Foot', { x: 48, y: 140 }, 5, 4, 5),\n      new Village('Black Tail', { x: 113, y: 107 }, 4, 5, 8),\n      new Village('Moon Town', { x: 129, y: 29 }, 8, 12, 25),\n    ];\n\n\n    // Clear paths with jitter\n    for (const path of paths) {\n      for (let i = 0; i < path.length - 1; i++) {\n        const from = { x: path[i][0], y: path[i][1] };\n        const to = { x: path[i + 1][0], y: path[i + 1][1] };\n        const pathWidth = path[i][2];\n        this.clearPathWithJitter(from, to, pathWidth);\n      }\n    }\n\n    // Clear circular areas with jitter\n    for (const clearing of clearings) {\n      this.clearCircleWithJitter(clearing.x, clearing.y, clearing.r);\n    }\n\n    // Calculate neighbor information for each tree\n    for (let y = 0; y < rowCount; y++) {\n      for (let x = 0; x < colCount; x++) {\n        const cell = this.grid[y][x];\n        if (cell.content instanceof Tree) {\n          const neighbors = {\n            top: this.grid[y - 1]?.[x]?.content instanceof Tree,\n            bottom: this.grid[y + 1]?.[x]?.content instanceof Tree,\n            left: this.grid[y]?.[x - 1]?.content instanceof Tree,\n            right: this.grid[y]?.[x + 1]?.content instanceof Tree,\n          };\n          cell.content.setNeighbors(neighbors);\n        }\n      }\n    }\n\n    for (const village of this.villages) {\n      village.generateFarms(this.rng, this)\n        .forEach(farm => {\n          this.grid[farm.row][farm.col].content = farm;\n        });\n      village.generateHouses(this.rng, this)\n        .forEach(house => {\n          this.grid[house.row][house.col].content = house;\n        });\n      village.generateVillagers(this.rng, this)\n        .forEach(villager => {\n          this.grid[villager.row][villager.col].content = villager;\n        });\n\n      // Set cell.village for each cell in the village radius\n      const { x: centerX, y: centerY } = village.center;\n      const radius = village.radius;\n      for (let y = centerY - radius; y <= centerY + radius; y++) {\n      for (let x = centerX - radius; x <= centerX + radius; x++) {\n          const dx = x - centerX;\n          const dy = y - centerY;\n          if (dx * dx + dy * dy <= radius * radius) {\n            this.grid[y][x].village = village;\n          }\n        }\n      }\n\n      // Generate starting home\n      this.set(61, 84, new House(61, 84, 'home'));\n    }\n\n    this.fillCenterWithGrass(1.0);\n\n    for (const statueProps of Object.values(statues)) {\n      const { x, y, name } = statueProps;\n      const fullName = `cat ${name} altar`;\n      const statue = new Statue(x, y, this, this.gameData, fullName);\n      if (x === statues.heart.x) {\n        statue.maxSpirits = 0;\n      }\n      // Place farms in the 8 squares around the statue\n      forEachSurroundingCell(x, y, (farmCol, farmRow) => {\n        const cell = this.grid[farmRow][farmCol];\n        cell.content = new Farm(farmCol, farmRow);\n      });\n      this.grid[y][x].content = statue;\n    }\n\n    on(GameEvent.SPAWN_FIRST_SPIRIT, () => {\n      this.set(64, 89, new Spirit(64, 89, '☁️', this));\n    });\n  }\n\n  getLookingAt() {\n    return this.grid[this.playerLookingAt.row][this.playerLookingAt.col];\n  }\n\n  get(col: number, row: number) {\n    if (row < 0 || row >= this.rowCount || col < 0 || col >= this.colCount) {\n      return null;\n    }\n    return this.grid[row][col];\n  }\n\n  clearPlants(col: number, row: number) {\n    if(\n      this.grid[row][col].content instanceof Tree\n      || this.grid[row][col].content instanceof Farm\n    ) {\n      this.grid[row][col].content = null;\n    }\n  }\n\n  // Fill the center area with fields to limit player movements\n  // until they finish the onboarding.\n  // Then clear out a path from where the player starts, to the obelisk,\n  // and to the heart statue.\n  fillCenterWithGrass(converage: number) {\n    const heartsPeak = this.villages[0];\n    const radius = 12;\n    const { x: centerX, y: centerY } = heartsPeak.center;\n    for (let y = centerY - radius; y <= centerY + radius; y++) {\n      for (let x = centerX - radius; x <= centerX + radius; x++) {\n        const cell = this.grid[y][x];\n        if (!cell.content && this.rng.next() <= converage) {\n          cell.content = new Farm(cell.x, cell.y);\n        } else if (cell.content instanceof Farm && this.rng.next() > converage) {\n          cell.content = null;\n        }\n      }\n    }\n    \n    const villagePath: Path = [\n      [61, 86, 2],\n      [69, 88, 0.9],\n      [75, 89, 0.9],\n      [76, 84, 0.9],\n    ];\n    for (let i = 0; i < villagePath.length - 1; i++) {\n      const from = { x: villagePath[i][0], y: villagePath[i][1] };\n      const to = { x: villagePath[i + 1][0], y: villagePath[i + 1][1] };\n      const pathWidth = villagePath[i][2];\n      this.clearPathWithJitter(from, to, pathWidth);\n    }\n  }\n\n  clearPathWithJitter(\n    from: { x: number, y: number },\n    to: { x: number, y: number },\n    pathWidth: number,\n  ) {\n    // Bresenham's line algorithm for any angle\n    const dx = Math.abs(to.x - from.x);\n    const dy = Math.abs(to.y - from.y);\n    const sx = from.x < to.x ? 1 : -1;\n    const sy = from.y < to.y ? 1 : -1;\n    let err = dx - dy;\n\n    let x = from.x;\n    let y = from.y;\n\n    const halfWidth = pathWidth / 2;\n\n    while (true) {\n      // Add jitter to the clearing area\n      const jitterAmount = pathWidth < 1 ? 0 : 1.2; // Adjust for more/less randomness\n      const jitterX = Math.ceil(this.rng.range(-jitterAmount, jitterAmount));\n      const jitterY = Math.ceil(this.rng.range(-jitterAmount, jitterAmount));\n\n      // Clear area around the current position with jitter\n      for (let ox = -halfWidth; ox <= halfWidth; ox++) {\n        for (let oy = -halfWidth; oy <= halfWidth; oy++) {\n          const clearX = Math.ceil(x + ox + jitterX);\n          const clearY = Math.ceil(y + oy + jitterY);\n          this.clearPlants(clearX, clearY);\n          if (pathWidth < 1) {\n            if (this.rng.next() > 0.5) {\n              this.clearPlants(clearX + 1, clearY);\n            } else {\n              this.grid[clearY][clearX].content = new Farm(clearX, clearY);\n              this.grid[clearY][clearX + 1].content = new Farm(clearX, clearY);\n            }\n          } else if (this.rng.next() > 0.1) {\n            if (this.rng.next() > 0.05) {\n              // Add probability for partial clearing to create natural edges\n              this.clearPlants(clearX, clearY);\n            } else {\n              this.grid[clearY][clearX].content = new Farm(clearX, clearY);\n            }\n          }\n        }\n      }\n\n      // Check if we've reached the destination\n      if (x === to.x && y === to.y) break;\n\n      const e2 = 2 * err;\n      if (e2 > -dy) {\n        err -= dy;\n        x += sx;\n      }\n      if (e2 < dx) {\n        err += dx;\n        y += sy;\n      }\n    }\n  }\n\n  clearCircleWithJitter(\n    centerX: number,\n    centerY: number,\n    radius: number,\n    fieldsOnly = false,\n    border = 99,\n    probability = 1,\n  ) {\n    for (let y = 0; y < this.rowCount; y++) {\n      for (let x = 0; x < this.colCount; x++) {\n        const dx = x - centerX;\n        const dy = y - centerY;\n        const distance = Math.sqrt(dx * dx + dy * dy);\n\n        // Add jitter to radius for natural edge\n        const jitterRadius = this.rng.range(-radius, radius) / 6;\n        const adjustedRadius = radius + jitterRadius;\n\n        // Calculate inner radius based on borderRatio\n        const innerRadius = adjustedRadius - border;\n        \n        if (distance >= innerRadius && distance <= adjustedRadius) {\n          // Add probability for partial clearing near edges\n          const edgeDistance = adjustedRadius - distance;\n          const clearProbability = Math.min(1, edgeDistance / 2 + 0.7) * probability;\n\n          if (this.rng.next() < clearProbability) {\n            const isFarm = this.grid[y][x].content instanceof Farm;\n            if (!fieldsOnly || fieldsOnly && isFarm) {\n              this.grid[y][x].content = null;\n            }\n          }\n        }\n      }\n    }\n  }\n\n  set(col: number, row: number, content: Drawable | null) {\n    if (this.grid[row] && this.grid[row][col]) {\n      this.grid[row][col].content = content;\n    }\n  }\n\n  update(timeElapsed: number, isCutscene: boolean) {\n    for (const row of this.grid) {\n      for (const cell of row) {\n        if (cell.content) {\n          cell.content.updateAnimation?.(timeElapsed);\n          if (!isCutscene) {\n            cell.content.update?.(timeElapsed);\n            if (cell.x != cell.content.col || cell.y != cell.content.row) {\n              this.grid[cell.content.row][cell.content.col].content = cell.content;\n              cell.content = null;\n            }\n            if (cell.content && (cell?.content as Spirit)?.dead) {\n              this.set(cell.content.col, cell.content.row, null);\n            }\n          }\n        }\n      }\n    }\n  }\n\n  draw(cx: number, cy: number) {\n    // Calculate rectangular render distance based on canvas size and current zoom\n    const zoom = drawEngine.zoom;\n    const renderWidth = (drawEngine.canvasWidth / zoom) / 2 + 50; // Add buffer\n    const renderHeight = (drawEngine.canvasHeight / zoom) / 2 + 50; // Add buffer\n    \n    // Keep circular \"seen\" radius for minimap\n    const seenRadius = 75;\n    const seenRadiusSquared = seenRadius * seenRadius;\n\n    const postDrawDrawables: Drawable[] = [];\n\n    for (const row of this.grid) {\n      for (const cell of row) {\n        const x = cell.x * CELL_WIDTH;\n        const y = cell.y * CELL_HEIGHT;\n        const dx = x - cx;\n        const dy = y - cy;\n\n        // Use circular bounds for \"seen\" detection (minimap)\n        const distanceSquared = dx * dx + dy * dy;\n        if (distanceSquared <= seenRadiusSquared) {\n          cell.seen = true;\n        }\n\n        if (\n          cell.y === this.playerLookingAt.row &&\n          cell.x === this.playerLookingAt.col &&\n          cell.content &&\n          cell.content.type !== 'oak' && cell.content.type !== 'spruce'\n        ) {\n          drawEngine.drawBackgroundImage(\n            GameAssets.cornerImage,\n            x - (16 - CELL_WIDTH) / 2,\n            y - (16 - CELL_HEIGHT) / 2\n          );\n        }\n        \n        // Draw within a rectangular draw distance\n        if (Math.abs(dx) <= renderWidth && Math.abs(dy) <= renderHeight) {\n          cell?.content?.draw();\n          if (cell?.content?.postDraw) {\n            postDrawDrawables.push(cell?.content);\n          }\n        }\n      }\n    }\n\n    // @ts-expect-error -- postDraw is definitely defined\n    postDrawDrawables.forEach(drawable => drawable.postDraw());\n  }\n}\n","\nexport const easeInOutSine = (x: number, min: number, max: number): number => {\n  const ease = -(Math.cos(Math.PI * x) - 1) / 2;\n  return min + ease * max;\n};\n\n/**\n * Converts a value from 0 to 1 to an exponential ease.\n * @param x value from 0 to 1\n * @returns value from 0 to 1\n */\nexport const easeInExpo = (x: number, ease = 5): number => {\n  return x === 1 ? 1 : 1 - Math.pow(2, -ease * x);\n};\n","import { colors } from '@/core/util/color';\nimport { GameMap } from './game-map';\nimport { Player } from './entities/player';\nimport { drawEngine } from '@/core/draw-engine';\n\n/* eslint-disable quote-props */\nconst pixelColors: Record<string, string> = {\n  'oak': colors.green1,\n  'spruce': colors.blue2,\n  'house': colors.blue4,\n  'field': colors.yellow1,\n  'statue': colors.blue6,\n  'unseen': colors.blue5,\n  'default': colors.yellow2,\n};\n/* eslint-enable quote-props */\n\n\nexport class MiniMap {\n  private lastUpdate = 0;\n  private updateInterval = 100; // Update once per second\n\n  constructor(private map: GameMap) { }\n\n  update(timeElapsed: number) {\n    this.lastUpdate += timeElapsed;\n  }\n\n  public draw(player: Player) {\n    if (this.lastUpdate < this.updateInterval) {\n      return;\n    }\n\n    this.lastUpdate = 0;\n    const ctx = drawEngine.ctx4;\n    const mapSize = 160;\n    const margin = 10;\n    const x = ctx.canvas.width - mapSize - margin; // Bottom right with margin\n    const y = ctx.canvas.height - mapSize - margin;\n\n    // Clear previous minimap\n    ctx.clearRect(x, y, mapSize, mapSize);\n\n    // Draw map pixels\n    for (let my = 0; my < mapSize; my++) {\n      for (let mx = 0; mx < mapSize; mx++) {\n        const cell = this.map.grid[my][mx];\n\n        if (!cell.seen) {\n          ctx.fillStyle = pixelColors.unseen;\n        } else {\n          ctx.fillStyle = pixelColors[cell.content?.type || 'default'] ?? pixelColors.default;\n        }\n\n        ctx.fillRect(x + mx, y + my, 1, 1);\n      }\n    }\n\n    if (player.col >= 0 && player.col < mapSize && player.row >= 0 && player.row < mapSize) {\n      ctx.fillStyle = colors.purple4;\n      ctx.beginPath();\n      ctx.arc(x + player.col, y + player.row, 2, 0, Math.PI * 2);\n      ctx.fill();\n    }\n  }\n}\n","import { drawEngine } from '@/core/draw-engine';\nimport { on } from '@/core/event';\nimport { StoryEngineEvent } from '@/core/story-engine';\nimport { colors } from '@/core/util/color';\n\nexport class DialogBox {\n  dialog: string | null = null;\n\n  constructor() {\n    on(StoryEngineEvent.STORY_DIALOG, (dialog) => {\n      this.dialog = dialog;\n    });\n\n    on(StoryEngineEvent.STORY_STATE_EXIT, () => {\n      this.dialog = null;\n    });\n  }\n\n  draw () {\n    if (this.dialog) {\n      const boxHeight = 160; // same as minimap\n      const margin = 10; // same as minimap\n      const boxWidth = c3.width - boxHeight - margin*3;\n      const x = margin;\n      const y = c3.height - boxHeight - margin;\n      drawEngine.ctx3.fillStyle = colors.purple0;\n      drawEngine.ctx3.fillRect(x, y, boxWidth, boxHeight);\n\n      this.dialog.split('\\n').forEach((dialog, i) => {\n        drawEngine.drawText(\n          dialog,\n          x + margin * 2,\n          y + margin * 2 + i * 40,\n          dialog[0] === '>' ? colors.purple4 : colors.black,\n          0, // left\n          0, // top\n          5,\n          1,\n          drawEngine.ctx3\n        );\n      });\n\n      drawEngine.drawText(\n          'press (space) to continue',\n          x + boxWidth - margin,\n          y + boxHeight - margin,\n          colors.purple4,\n          2, // right\n          2, // bottom\n          5,\n          1,\n          drawEngine.ctx3\n        );\n    }\n  }\n}\n","import { drawEngine } from '@/core/draw-engine';\nimport { colors } from '@/core/util/color';\nimport { easeInOutSine } from '@/core/util/util';\nimport { MiniMap } from './mini-map';\nimport { GameMap } from './game-map';\nimport { Player } from './entities/player';\nimport { Actions } from './actions';\nimport { GameData } from './game-data';\nimport { MAX_LIVES, MAX_MAGIC, NOTIFICATION_DURATION } from './constants';\nimport { DialogBox } from './dialog-box';\nimport { MAGIC, EMPTY_HEART, FULL_HEART, ONE_THIRD_HEART, TWO_THIRDS_HEART } from '@/core/font';\nimport { on } from '@/core/event';\nimport { GameEvent } from './event-manifest';\nimport { Village } from './entities/village';\n\nexport class HUD {\n  miniMap: MiniMap;\n  dialogBox: DialogBox;\n  renderSuperstition = false;\n  renderLives = false;\n  renderMagic = false;\n  villageName = '';\n  villageNameTimer = 0;\n\n  constructor(\n    public map: GameMap,\n    public player: Player,\n    public actions: Actions,\n    public gameData: GameData,\n  ) {\n    this.miniMap = new MiniMap(map);\n    this.dialogBox = new DialogBox();\n\n    on(GameEvent.ENABLE_SCRATCH, () => {\n      this.renderLives = true;\n    });\n\n    on(GameEvent.NOT_ENOUGH_MAGIC, () => {\n      this.renderMagic = true;\n    });\n\n    on(GameEvent.ENTER_VILLAGE, (village: Village) => {\n      this.villageName = village.name;\n      this.villageNameTimer = 3000;\n    });\n\n    on(GameEvent.SCARED, () => {\n      this.renderSuperstition = true;\n    });\n  }\n\n  update(timeElapsed: number) {\n    this.miniMap.update(timeElapsed);\n    this.villageNameTimer -= timeElapsed;\n  }\n\n  draw() {\n    this.renderLives && this.drawLives();\n    this.renderMagic && this.drawMagic();\n    this.drawGoals();\n    this.renderSuperstition && this.drawSuperstition();\n    this.drawActions();\n    this.drawInfoBox();\n    this.renderLives && this.miniMap.draw(this.player);\n    this.dialogBox.draw();\n  }\n\n  drawActions() {\n    const actions = this.actions.actions;\n    if (!actions || !actions[0].enabled) {\n      return;\n    }\n\n    const boxWidth = 120;\n    const boxHeight = 120;\n    const spacing = 10;\n    const totalWidth = actions.length * boxWidth + (actions.length - 1) * spacing;\n    const startX = Math.round((drawEngine.ctx3.canvas.width - totalWidth) / 2);\n    const y = drawEngine.ctx3.canvas.height - boxHeight - 10;\n\n    actions.forEach(({ type, color, symbol }, index) => {\n      const x = startX + index * (boxWidth + spacing);\n\n      // Draw background box\n      drawEngine.ctx3.fillStyle = colors.purple0;\n      drawEngine.ctx3.fillRect(x, y, boxWidth, boxHeight);\n\n      // Draw symbol (large font)\n      drawEngine.drawText(\n        symbol,\n        x + boxWidth / 2,\n        y + 30,\n        color,\n        1, // center\n        1, // middle\n        7,\n        1,\n        drawEngine.ctx3\n      );\n\n      // Draw action name\n      drawEngine.drawText(\n        type,\n        x + boxWidth / 2,\n        y + 95,\n        colors.black,\n        1, // center\n        1, // middle\n        3,\n        1,\n        drawEngine.ctx3\n      );\n    });\n  }\n\n  drawLives() {\n    const x = 16;\n    const y = 16;\n    const fullHearts = Math.floor(this.gameData.lives);\n    const emptyHearts = Math.floor(MAX_LIVES - this.gameData.lives);\n    const halfHearts = MAX_LIVES - fullHearts - emptyHearts;\n    const partialHearts = this.gameData.lives - fullHearts;\n    const text = FULL_HEART.repeat(fullHearts)\n      + (partialHearts > 0.3 ? TWO_THIRDS_HEART : ONE_THIRD_HEART).repeat(halfHearts)\n      + EMPTY_HEART.repeat(emptyHearts);\n    const size = 5;\n\n    const boxW = (text.length * 6 + 1) * size;\n    const boxH = 7 * size;\n    drawEngine.ctx3.fillStyle = colors.purple0;\n    drawEngine.ctx3.fillRect(x, y, boxW, boxH);\n    drawEngine.drawText(text, x + size, y + size, colors.purple4, 0, 0, size, 1, drawEngine.ctx3);\n  }\n\n  drawMagic() {\n    let x = c3.width - 16;\n    const y = 16;\n    const fullMagic = this.gameData.magic;\n    const emptyMagic = this.gameData.maxMagic - this.gameData.magic;\n    const noMagic = MAX_MAGIC - this.gameData.maxMagic;\n\n    const size = 5;\n    const charWidth = (5 + 1) * size;\n\n    const boxW = MAX_MAGIC * charWidth + size;\n    const boxH = 7 * size;\n    drawEngine.ctx3.fillStyle = colors.yellow1;\n    drawEngine.ctx3.fillRect(x - boxW + size, y, boxW, boxH);\n\n    let text = MAGIC.repeat(fullMagic);\n    x -= text.length * charWidth;\n    drawEngine.drawText(text, x + size, y + size, colors.blue2, 0, 0, size, 1, drawEngine.ctx3);\n\n    text = MAGIC.repeat(emptyMagic);\n    x -= text.length * charWidth;\n    drawEngine.drawText(text, x + size, y + size, colors.blue3, 0, 0, size, 1, drawEngine.ctx3);\n\n    text = MAGIC.repeat(noMagic);\n    x -= text.length * charWidth;\n    drawEngine.drawText(text, x + size, y + size, colors.yellow2, 0, 0, size, 1, drawEngine.ctx3);\n  }\n\n  drawGoals() {\n    const goals = this.gameData.goals;\n\n    const baseX = 16;\n    const y = 16 + 7 * 5 + 10; // lives y  + lives box height + margin\n    const boxW = 510;\n    const boxH = 5 * 7 + 30;\n    const size = 3;\n    const padding = 5;\n    const aD = 200; // 100ms slide animation\n    \n    goals.filter(goal => goal.time > 0)\n    .forEach((goal, i) => {\n      const {label, time} = goal;\n      const boxY = y + (boxH + padding) * i;\n      \n      // Calculate animation offset based on remaining time\n      let offsetX = 0;\n      const distanceX = boxW + baseX;\n      if (time > NOTIFICATION_DURATION - aD) {\n        // Sliding in from left (appearing)\n        const progress = (NOTIFICATION_DURATION - time) / aD;\n        const easedProgress = easeInOutSine(progress, 0, 1);\n        offsetX = -distanceX * (1 - easedProgress);\n      } else if (time < aD) {\n        // Sliding out to left (disappearing)\n        const progress = time / aD;\n        const easedProgress = easeInOutSine(progress, 0, 1);\n        offsetX = -distanceX * (1 - easedProgress);\n      }\n      \n      const x = baseX + offsetX;\n      \n      drawEngine.ctx3.fillStyle = colors.purple4;\n      drawEngine.ctx3.fillRect(x, boxY, boxW, boxH);\n      drawEngine.drawText(\n        'GOAL',\n        x + size + padding,\n        boxY + padding,\n        colors.white,\n        0, // left\n        0, // top\n        size + 1,\n        1,\n        drawEngine.ctx3\n      );\n      drawEngine.drawText(\n        label,\n        x + size + padding + 20,\n        35 + boxY + padding,\n        colors.purple0,\n        0, // left\n        0, // top\n        size,\n        1,\n        drawEngine.ctx3\n      );\n    });\n  }\n\n  drawSuperstition() {\n    const text = 'superstition';\n    const size = 3;\n    const charWidth = 5;\n    const padding = 5;\n    const boxW = (text.length * size + padding * 2) * charWidth;\n    const boxH = 35;\n    const x = Math.round(c3.width / 2 - boxW / 2);\n    const y = 16;\n\n    // Background\n    drawEngine.ctx3.fillStyle = colors.purple0;\n    drawEngine.ctx3.fillRect(x, y, boxW, 62);\n\n    drawEngine.ctx3.fillStyle = colors.blue5;\n    drawEngine.ctx3.fillRect(x + padding, y + padding, boxW - 2 * padding, boxH - 2 * padding);\n\n    drawEngine.ctx3.fillStyle = this.gameData.superstition > 0.9 ? colors.purple4 : colors.blue2;\n    const barSize = Math.round(this.gameData.superstition * (boxW - 2 * padding) / 3) * 3;\n    drawEngine.ctx3.fillRect(x + padding, y + padding, barSize, boxH - 2 * padding);\n\n    drawEngine.drawText(text, c3.width / 2, y + boxH + size, colors.blue5, 1, 0, size, 1, drawEngine.ctx3);\n  }\n\n  drawInfoBox() {\n    if(this.villageNameTimer > 0) {\n      const t = this.villageNameTimer;\n      const tNorm = Math.max(0, Math.min(1, Math.min(t / 150, (3000 - t) / 150)));\n      const opacity = easeInOutSine(tNorm, 0, 1);\n      drawEngine.ctx3.globalAlpha = opacity;\n      this.drawInfo(`^^ ${this.villageName}`, 170);\n      drawEngine.ctx3.globalAlpha = 1;\n    }\n\n    if (this.map.playerLookingAt) {\n      const cell = this.map.getLookingAt();\n      if (cell?.content?.name) {\n        this.drawInfo(cell.content.name, c3.height - 170);\n      }\n    }\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  drawInfo(text: string, y: number) {\n    const boxWidth = 350;\n    const boxHeight = 35;\n    drawEngine.ctx3.fillStyle = colors.purple5;\n    drawEngine.ctx3.fillRect(\n      c3.width / 2 - boxWidth / 2 + 4,\n      y - 6 * 3 - 4,\n      boxWidth - 8,\n      boxHeight + 8,\n    );\n    drawEngine.ctx3.fillStyle = colors.yellow2;\n    drawEngine.ctx3.fillRect(\n      c3.width / 2 - boxWidth / 2,\n      y - 6 * 3,\n      boxWidth,\n      boxHeight,\n    );\n    drawEngine.drawText(\n      text,\n      c3.width / 2,\n      y,\n      colors.purple4,\n      1, // center\n      1, // middle\n      3,\n      1,\n      drawEngine.ctx3\n    );\n  }\n}\n","import { GameAssets } from '../game-assets';\nimport { CELL_HEIGHT, CELL_WIDTH, MAX_MAGIC, MAX_REPAIR } from '../constants';\nimport { GameMap } from '../game-map';\nimport { drawHpBar } from './hp-bar';\nimport { colors } from '@/core/util/color';\nimport { emit } from '@/core/event';\nimport { GameEvent } from '../event-manifest';\nimport { GameStaticObject } from '@/core/game-static-object';\nimport { repair } from '@/core/audio';\n\nexport class Obelisk extends GameStaticObject {\n  map: GameMap;\n  name = 'barrier obelisk';\n  repair = 0;\n  \n  constructor(map: GameMap) {\n    const col = 69;\n    const row = 88; \n    super(\n      GameAssets.obelisk,\n      col * CELL_WIDTH,\n      row * CELL_HEIGHT,\n      'obelisk',\n    );\n    this.map = map;\n    this.map.set(this.col, this.row, this);\n  }\n\n  draw() {\n    super.draw();\n    if (this.repair > 0) {\n      drawHpBar(this.repair, MAX_REPAIR, this.x, this.y, [colors.yellow1, colors.yellow2, colors.blue5, colors.blue6]);\n    }\n  }\n\n  attemptRepair() {\n    const maxProgress = this.map.gameData.magic / MAX_MAGIC;\n    const maxRepair = MAX_REPAIR * maxProgress;\n    if (this.repair < maxRepair) {\n      this.repair ++;\n      repair(2 * this.repair - 10);\n    } else {\n      repair(-10);\n      emit(GameEvent.NOT_ENOUGH_MAGIC);\n    }\n\n    if (this.repair === MAX_REPAIR) {\n      emit(GameEvent.GAME_END);\n    }\n  }\n}\n","import { GameMap } from './game-map';\nimport { Player } from './entities/player';\nimport { MAX_REPAIR, statues } from './constants';\nimport { colors } from '@/core/util/color';\nimport { emit, on } from '@/core/event';\nimport { MAGIC, SCRATCH, TELEPORT } from '@/core/font';\nimport { controls } from '@/core/controls';\nimport { Statue } from './entities/statue';\nimport { Obelisk } from './entities/obelisk';\nimport { addTimeEvent } from '@/core/timer';\nimport { GameEvent } from './event-manifest';\nimport { repair } from '@/core/audio';\nimport { Cell } from './types';\nimport { Spirit } from './entities/spirit';\nimport { Farm } from './entities/farm';\nimport { House } from './entities/house';\n\ntype ActionType = 'teleport' | 'scratch' | 'repair' | 'sleep';\ntype Action = {\n  type: ActionType,\n  color: string,\n  enabled: boolean,\n  symbol: string,\n}\n\nconst actions: Action[] = [\n  {\n    type: 'scratch',\n    color: colors.purple4,\n    enabled: false,\n    symbol: SCRATCH,\n  },\n  {\n    type: 'teleport',\n    color: colors.blue2,\n    enabled: true,\n    symbol: TELEPORT,\n  },\n  {\n    type: 'repair',\n    color: colors.green1,\n    enabled: true,\n    symbol: MAGIC,\n  },\n  {\n    type: 'sleep',\n    color: colors.yellow2,\n    enabled: true,\n    symbol: 'z',\n  },\n];\n\nexport class Actions {\n  map: GameMap;\n  player: Player;\n  actions: Action[] = [];\n\n  constructor(map: GameMap, player: Player) {\n    this.map = map;\n    this.player = player;\n\n    on(GameEvent.ENABLE_SCRATCH, () => {\n      this.actions[0].enabled = true;\n    });\n  }\n\n  // Update available actions based on player's current position\n  update(): void {\n    const cellInFront = this.map.getLookingAt();\n\n    const canTeleport  = this.canTeleport(cellInFront);\n    const canRestore = this.canRestore(cellInFront);\n    const canSleep = this.canSleep(cellInFront);\n    const canAttack = this.canAttack(cellInFront);\n\n    this.actions = [\n      canAttack ? actions[0]\n      : canTeleport ? actions[1]\n      : canRestore ? actions[2]\n      : canSleep ? actions[3]\n      : actions[0]\n    ];\n\n    if (controls.isAction1 && !controls.previousState.isAction1) {\n      switch (true) {\n        case canAttack:\n          // Attack happens somewhere else\n          break;\n        \n        case canTeleport:\n          emit(GameEvent.TELEPORT);\n          break;\n        \n        case canRestore:\n          this.doRestore(cellInFront);\n          break;\n\n        case canSleep:\n          emit(GameEvent.SLEEP);\n\n      \n        default:\n          break;\n      }\n    }\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  doRestore(cellInFront: Cell) {\n    emit(GameEvent.RESTORE);\n    const object = cellInFront.content as Statue | Obelisk;\n    if (object.repair < MAX_REPAIR) {\n      if (object instanceof Statue) {\n        object.repair++;\n        repair(object.repair);\n        if (object.repair >= MAX_REPAIR) {\n          addTimeEvent(() => {\n            emit(GameEvent.STATUE_RESTORED, this.map.gameData.maxMagic);\n          }, 4000);\n        }\n      } else if (object instanceof Obelisk) {\n        object.attemptRepair();\n      }\n    }\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  private canRestore(cellInFront: Cell): boolean {\n    const object = cellInFront.content as Statue | Obelisk;\n    const type = object?.type;\n    return (\n      (type === 'statue' || type === 'obelisk')\n    ) && object.repair < MAX_REPAIR;\n  }\n\n  private canTeleport(cellInFront: Cell) {\n    return cellInFront.content instanceof Statue\n      && this.player.col != statues.heart.x\n      && cellInFront.content.state === Statue.State.REPAIRED;\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  private canSleep(cellInFront: Cell) {\n    return cellInFront.content instanceof House\n      && cellInFront.content.name === 'home';\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  private canAttack(cellInFront: Cell) {\n    return cellInFront.content instanceof Spirit\n      || cellInFront.content instanceof Farm;\n  }\n}\n","import { emit, on } from '@/core/event';\nimport { MAX_LIVES, NOTIFICATION_DURATION } from './constants';\nimport { SceneProps } from './game-story';\nimport { GameEvent } from './event-manifest';\nimport { addTimeEvent } from '@/core/timer';\nimport { heal, hissAndSpit } from '@/core/audio';\n\ninterface Goal {\n  label: string,\n  time: number,\n}\n\nexport class GameData {\n  cutscene = false;\n  lives = MAX_LIVES;\n  maxMagic = 0;\n  magic = 0;\n  superstition = 0;\n  goals: Goal[] = [];\n  hasClearedIntro = false;\n  win = false;\n\n  constructor() {\n    on(GameEvent.SCARED, () => {\n      this.superstition = Math.min(1, this.superstition + 0.01);\n    });\n\n    on(GameEvent.CUTSCENE_START, () => {\n      this.cutscene = true;\n    });\n\n    on(GameEvent.CUTSCENE_END, (scene: SceneProps) => {\n      this.cutscene = false;\n      if (scene.goals) {\n        scene.goals.forEach(goal => {\n          this.goals.push({\n            label: goal,\n            time: NOTIFICATION_DURATION,\n          });\n        });\n      }\n    });\n\n    on(GameEvent.ATTACK_PLAYER, (level: number) => {\n      this.lives -= (level + 1) / 3;\n      this.lives = Math.round(this.lives * 3) / 3;\n      this.lives = Math.round(this.lives * 10) / 10;\n      hissAndSpit();\n      if (this.lives <= 0) {\n        this.lives = 0;\n        emit(GameEvent.GAME_OVER);\n      }\n    });\n\n    on(GameEvent.STATUE_RESTORED, () => {\n      this.maxMagic++;\n      this.magic = this.maxMagic;\n      this.heal();\n\n      emit(GameEvent.NEXT_STATUE_DIALOG, this.maxMagic);\n    });\n\n    on(GameEvent.SLEEP, () => {\n      this.heal();\n    });\n  }\n\n  heal() {\n    let i = 0;\n    for (let lives = Math.floor(this.lives) + 1; lives <= MAX_LIVES; lives++) {\n      addTimeEvent(() => {\n        this.lives = lives;\n        heal();\n      }, 500 + 800 * (i++));\n    }\n  }\n\n  update(timeElapsed: number) {\n    this.goals.forEach(goal => goal.time -= timeElapsed);\n  }\n\n  getLevel() {\n    return this.superstition * 4 + this.maxMagic;\n  }\n}\n","import { controls } from './controls';\nimport { emit, on } from '@/core/event';\n\nexport interface DialogState {\n  dialogs: string[];\n  isDone?: boolean;\n}\n\nexport interface Script {\n  [stateKey: string]: DialogState;\n}\n\nexport const enum StoryEngineEvent {\n  // Story events\n  STORY_STATE_ENTER = 1,\n  STORY_STATE_EXIT = 2,\n  STORY_DIALOG = 3,\n};\n\nexport class Story<T extends Script> {\n  private currentStateKey: keyof T | null = null;\n  private currentDialogIndex = 0;\n  public isActive = false;\n  private previousSpacePressed = false;\n  public currentState: keyof T | null = null;\n  \n  fullText = '';\n  visibleCharacters = 0;\n  textAnimationTimer = 0;\n  charactersPerSecond = 20;\n  textAnimationState = 2; // 0=typing, 1=complete, 2=waiting\n\n  constructor(private readonly script: T) {\n    on(StoryEngineEvent.STORY_STATE_ENTER, (stateKey: keyof T) => {\n      this.enterState(stateKey);\n    });\n  }\n\n  public enterState(stateKey: keyof T) {\n    if (!this.script[stateKey]) {\n      return;\n    }\n\n    this.currentStateKey = stateKey;\n    this.currentState = stateKey;\n    this.currentDialogIndex = 0;\n    this.isActive = true;\n    this.previousSpacePressed = false;\n\n    this.showCurrentDialog();\n  }\n\n  update(timeElapsed: number) {\n    if (!this.isActive || !this.currentStateKey) {\n      return;\n    }\n\n    const spacePressed = controls.keyMap.get('Space');\n    const spaceJustPressed = spacePressed && !this.previousSpacePressed;\n    this.previousSpacePressed = spacePressed || false;\n\n    // Update typewriter animation\n    if (this.textAnimationState === 0) { // typing\n      this.textAnimationTimer += timeElapsed;\n      const targetCharacters = Math.floor((this.textAnimationTimer / 1000) * this.charactersPerSecond);\n      \n      if (targetCharacters >= this.fullText.length) {\n        // Animation complete\n        this.visibleCharacters = this.fullText.length;\n        this.textAnimationState = 1; // complete\n        this.emitCurrentVisibleText();\n      } else if (targetCharacters > this.visibleCharacters) {\n        // Show more characters\n        this.visibleCharacters = targetCharacters;\n        this.emitCurrentVisibleText();\n      }\n    }\n\n    if (spaceJustPressed) {\n      this.handleSpacePress();\n    }\n  }\n\n  private handleSpacePress() {\n    if (!this.currentStateKey) {\n      return;\n    }\n\n    if (this.textAnimationState === 0) { // typing\n      // Skip typing animation - show full text immediately\n      this.visibleCharacters = this.fullText.length;\n      this.textAnimationState = 1; // complete\n      this.emitCurrentVisibleText();\n      return;\n    }\n\n    if (this.textAnimationState === 1) { // complete\n      // Move to next dialog or exit\n      const currentState = this.script[this.currentStateKey];\n      \n      if (this.currentDialogIndex < currentState.dialogs.length - 1) {\n        // Move to next dialog\n        this.currentDialogIndex++;\n        this.showCurrentDialog();\n      } else {\n        // All dialogs complete, exit state\n        this.exitCurrentState();\n      }\n    }\n  }\n\n  private emitCurrentVisibleText() {\n    const visibleText = this.fullText.substring(0, this.visibleCharacters);\n    emit(StoryEngineEvent.STORY_DIALOG, visibleText);\n  }\n\n  private showCurrentDialog() {\n    if (!this.currentStateKey) {\n      return;\n    }\n\n    const currentState = this.script[this.currentStateKey];\n    currentState.isDone = true;\n    this.fullText = currentState.dialogs[this.currentDialogIndex];\n    \n    // Reset typewriter animation\n    this.visibleCharacters = 0;\n    this.textAnimationTimer = 0;\n    this.textAnimationState = 0; // typing\n    \n    // Start with empty text\n    this.emitCurrentVisibleText();\n  }\n\n  private exitCurrentState() {\n    if (!this.currentStateKey) {\n      return;\n    }\n\n    const stateKey = this.currentStateKey;\n    this.isActive = false;\n    this.currentStateKey = null;\n    this.currentState = null;\n    this.currentDialogIndex = 0;\n    \n    emit(StoryEngineEvent.STORY_STATE_EXIT, stateKey);\n  }\n}\n","import { drawEngine } from '@/core/draw-engine';\nimport { emit, on } from '@/core/event';\nimport { DialogState, Story, StoryEngineEvent } from '@/core/story-engine';\nimport { addTimeEvent } from '@/core/timer';\nimport { GameEvent } from './event-manifest';\nimport { MAX_MAGIC } from './constants';\n\nexport interface SceneProps extends DialogState {\n  goals?: string[],\n};\n\nconst enum Scene {\n  intro = 1,\n  spirit,\n  barrier,\n  temple,\n  noMagic,\n  magicRestored,\n  villagers,\n  end,\n}\n\nconst script = {} as Record<Scene, SceneProps>;\n\n// Use programmatic assignment to avoid preserving enum string names\nscript[Scene.intro] = {\n  dialogs: [\n    'Zzzzz...',\n    'Yawwwn...',\n    'How long was i sleeping?...',\n  ],\n};\n\nscript[Scene.spirit] = {\n  dialogs: [\n    'Evil spirits?',\n    'Has the magic barrier failed\\nwhile I slept??',\n    'This one seems weak.',\n    \"I'll exorcise it and then\\ngo check the barrier\",\n    '> Use (space) to attack',\n  ],\n  goals: ['find magic barrier obelisk'],\n};\n\nscript[Scene.barrier] = {\n  dialogs: [\n    'I have no magic power left!',\n    'My magic comes from villagers\\nworshiping me...',\n    'Something must be wrong with\\nthe cat altar.',\n  ],\n  goals: ['repair the cat altar'],\n};\n\nscript[Scene.noMagic] = {\n  dialogs: [\n    \"I don't have enough magic!\",\n    'Something must be wrong with\\nthe cat altars in the valley',\n  ],\n};\n\nscript[Scene.temple] = {\n  dialogs: [\n    'My magic has increased a little.',\n    'But the other altars...\\nthey must be damaged too.',\n  ],\n  goals: [\n    'repair all 5 temples',\n    'restore the forest magic barrier',\n  ],\n};\n\nscript[Scene.villagers] = {\n  dialogs: [\n    'Villagers are very supersticious.',\n    'I should not let them see me,\\nthat will empower the evil spirits.',\n  ],\n};\n\nscript[Scene.magicRestored] = {\n  dialogs: [\n    'I have restore my full magic power',\n    'Now I am able to restore the\\nmagic barrier again.',\n  ],\n  goals: [\n    'restore the forest magic barrier',\n  ]\n};\n\nscript[Scene.end] = {\n  dialogs: [\n    'The barrier is restored.\\nTime for a well deserved nap...',\n  ],\n};\n\nconst postIntro = () => {\n  emit(GameEvent.WAKE_UP);\n  emit(GameEvent.SPAWN_FIRST_SPIRIT);\n  drawEngine.cameraLerpSpeed = 0.08;\n};\n\nexport class GameStory {\n  story: Story<typeof script>;\n\n  constructor() {\n    this.story = new Story(script);\n\n    on(StoryEngineEvent.STORY_STATE_EXIT, (label: Scene) => {\n      emit(GameEvent.CUTSCENE_END, script[label]);\n      if (label === Scene.intro) {\n        postIntro();\n        addTimeEvent(() => {\n          emit(StoryEngineEvent.STORY_STATE_ENTER, Scene.spirit);\n        }, 3000);\n      }\n      if(label === Scene.spirit) {\n        emit(GameEvent.ENABLE_SCRATCH);\n      }\n      if (label === Scene.end) {\n        emit(GameEvent.FADE_OUT);\n      }\n    });\n\n    on(StoryEngineEvent.STORY_STATE_ENTER, () => {\n      emit(GameEvent.CUTSCENE_START);\n    });\n\n    on(GameEvent.NOT_ENOUGH_MAGIC, () => {\n      if (script[Scene.barrier].isDone) {\n        emit(StoryEngineEvent.STORY_STATE_ENTER, Scene.noMagic);\n      } else {\n        emit(StoryEngineEvent.STORY_STATE_ENTER, Scene.barrier);\n      }\n    });\n\n    on(GameEvent.NEXT_STATUE_DIALOG, (magicLevel: number) => {\n      if (magicLevel < MAX_MAGIC) {\n        emit(StoryEngineEvent.STORY_STATE_ENTER, Scene.temple);\n      } else {\n        emit(StoryEngineEvent.STORY_STATE_ENTER, Scene.magicRestored);\n      }\n    });\n\n    on(GameEvent.SCARED, () => {\n      if (!script[Scene.villagers].isDone) {\n        emit(StoryEngineEvent.STORY_STATE_ENTER, Scene.villagers);\n      }\n    });\n\n    on(GameEvent.GAME_END, () => {\n      emit(StoryEngineEvent.STORY_STATE_ENTER, Scene.end);\n    });\n\n    addTimeEvent(() => this.story.enterState(Scene.intro), 1000);\n    // setTimeout(() => {\n    //   postIntro();\n    // }, 10);\n  }\n\n  update (timeElapsed: number) {\n    this.story.update(timeElapsed);\n  }\n}\n","class MusicPlayer {\n  audioContext: AudioContext | undefined;\n  startTime = 0;\n  isPlaying = false;\n  buffer: AudioBuffer | undefined;\n  musicProcessorNode: AudioWorkletNode | undefined;\n\n  async start() {\n    if (this.isPlaying) return;\n\n    this.audioContext = new (window.AudioContext || (window as any).webkitAudioContext)();\n    await this.audioContext.resume();\n    await this.audioContext.audioWorklet.addModule('music-worklet.js');\n\n    this.musicProcessorNode = new AudioWorkletNode(this.audioContext, 'mp');\n    \n    this.musicProcessorNode.connect(this.audioContext.destination);\n    this.isPlaying = true;\n  }\n\n  startMelody() {\n    this.musicProcessorNode?.port.postMessage(0);\n  }\n\n  pause() {\n    this.musicProcessorNode?.port.postMessage(1);\n  }\n\n  unpause() {\n    this.musicProcessorNode?.port.postMessage(2);\n  }\n\n  stop() {\n    if (this.isPlaying) {\n      this.musicProcessorNode?.disconnect();\n      this.isPlaying = false;\n    }\n  }\n}\n\nexport default new MusicPlayer();\n","import { State } from '@/core/state';\nimport { drawEngine } from '@/core/draw-engine';\nimport { Player } from '@/game/entities/player';\nimport { GameMap } from '@/game/game-map';\nimport { HUD } from '@/game/hud';\nimport { Actions } from '@/game/actions';\nimport { GameData } from '@/game/game-data';\nimport { GameStory } from '@/game/game-story';\nimport { addTimeEvent, updateTimeEvents } from '@/core/timer';\nimport { Obelisk } from '@/game/entities/obelisk';\nimport musicPlayer from '@/core/music-player';\nimport { on } from '@/core/event';\nimport { GameEvent } from '@/game/event-manifest';\nimport { gameStateMachine } from '@/game-state-machine';\nimport { menuState } from './menu.state';\nimport { MAX_LIVES } from '@/game/constants';\n\nexport class GameState implements State {\n  map!: GameMap;\n  cat!: Player;\n  hud!: HUD;\n  actions!: Actions;\n  gameData!: GameData;\n  story!: GameStory;\n  playMusic = true;\n\n  onLeave() {\n    musicPlayer.stop();\n    drawEngine.ctx4.clearRect(0, 0, c4.width, c4.height);\n  }\n\n  onEnter() {\n    if (this.playMusic) {\n      musicPlayer.start();\n    }\n    \n    on(GameEvent.ENABLE_SCRATCH, () => {\n      musicPlayer.startMelody();\n    });\n    on(GameEvent.PAUSE, () => {\n      musicPlayer.pause();\n    });\n    on(GameEvent.UNPAUSE, () => {\n      musicPlayer.unpause();\n    });\n\n    on(GameEvent.GAME_OVER, () => {\n      addTimeEvent(() => gameStateMachine.setState(menuState), 3000);\n    });\n\n    on(GameEvent.FADE_OUT, () => {\n      addTimeEvent(() => gameStateMachine.setState(menuState), 3000);\n    });\n\n    this.gameData = new GameData();\n    this.map = new GameMap(160, 160, this.gameData);\n    this.cat = new Player(60, 85, this.map, this.gameData);\n    // this.cat = new Player(94, 133, this.map, this.gameData);\n    this.actions = new Actions(this.map, this.cat);\n    this.hud = new HUD(this.map, this.cat, this.actions, this.gameData);\n    this.story = new GameStory();\n    \n    this.map.set(this.cat.col, this.cat.row, this.cat);\n    new Obelisk(this.map);\n    drawEngine.setCamera(this.cat.x, this.cat.y, 20, true);\n    drawEngine.cameraLerpSpeed = 0.01;\n  }\n\n  onUpdate(timeElapsed: number) {\n    const zoom = 5 + (MAX_LIVES - this.gameData.lives) / MAX_LIVES;\n    drawEngine.setCamera(this.cat.x, this.cat.y, zoom);\n    drawEngine.updateCamera();\n\n    if (this.gameData.lives > 0) {\n      if (!this.gameData.cutscene) {\n        this.actions.update();\n      }\n      this.map.update(timeElapsed, this.gameData.cutscene);\n      this.hud.update(timeElapsed);\n      this.gameData.update(timeElapsed);\n    }\n    this.story.update(timeElapsed);\n    updateTimeEvents(timeElapsed);\n\n    if (this.gameData.lives > 0 && !this.gameData.win) {\n      this.map.draw(this.cat.x, this.cat.y);\n      this.hud.draw();\n    } else {\n      if (this.gameData.lives > 0) {\n        this.hud.draw();\n      }\n      this.cat.update(timeElapsed);\n      this.cat.draw();\n    }\n    drawEngine.resetCamera();\n  }\n}\n","import { State } from '@/core/state';\nimport { drawEngine } from '@/core/draw-engine';\nimport { controls } from '@/core/controls';\nimport { gameStateMachine } from '@/game-state-machine';\nimport { GameState } from './game.state';\nimport { colors } from '@/core/util/color';\nimport { GameAssets } from '@/game/game-assets';\nimport { SeededRandom } from '@/core/util/rng';\n\nconst toggleFullscreen = () => {\n  if (!document.fullscreenElement) {\n    document.documentElement.requestFullscreen();\n  } else {\n    document.exitFullscreen();\n  }\n};\n\nconst rng = new SeededRandom(0);\n\nconst drawBackground = () => {\n  const bgColors = [\n    colors.blue4,\n    colors.blue3,\n    colors.blue2,\n    colors.blue1,\n    colors.blue0,\n  ];\n  const sectionHeight = Math.ceil(c2.height / bgColors.length);\n  const sections = 32;\n  const sectionW = c2.width / sections;\n  const offsetFreq = 4;\n  const offsetAmplitude = 16;\n  for (let index = 0; index < sections; index++) {\n    const yOffset = Math.round(\n      offsetAmplitude * Math.sin(1 - offsetFreq * 2 * Math.PI * index / sections)\n      / 10\n    ) * 10;\n    bgColors.forEach((color, row) => {\n      drawEngine.ctx1.fillStyle = color;\n      drawEngine.ctx1.fillRect(\n        sectionW * index,\n        yOffset + sectionHeight * row - 20,\n        Math.ceil(c2.width / sections),\n        sectionHeight\n      );\n    });\n  }\n\n  const iconSize = 32;\n  const iconInterval = 22;\n  const cols = c2.width / iconInterval;\n  const rows = (c2.height / 2) / iconInterval; // fill half the screen\n  const oak: HTMLImageElement = GameAssets.oak;\n  const spruce: HTMLImageElement = GameAssets.spruce;\n\n  if (!oak) {\n    return;\n  }\n\n  for (let col = 0; col <= cols + iconSize; col++) {\n    const mountainHeight = rows * (1.2 - Math.cos((col / cols) * 2 * Math.PI));\n    for(let row = mountainHeight; row > 0; row--) {\n      const offsetX = 5 * Math.sin(12 * Math.PI * (row / rows));\n      drawEngine.drawBackgroundImage(\n        0.2 + rng.next() > (row / (rows)) ? oak : spruce,\n        col * iconInterval + offsetX - iconSize/2,\n        c2.height - (row * iconInterval + rng.next() * 0.7) / 2,\n        false,\n        iconSize,\n        iconSize,\n      );\n    }\n  }\n\n  rng.rngSeed = 0;\n};\n\nclass MenuState implements State {\n  animationTimer = 0;\n  previousFPressed = false;\n\n  onUpdate(timeElapsed: number) {\n    this.animationTimer += timeElapsed;\n\n    drawBackground();\n    const xCenter = drawEngine.ctx2.canvas.width / 2;\n    drawEngine.drawText(\n      'Meow Mountain',\n      xCenter,\n      100,\n      colors.blue0,\n      1, // center\n      0, // top\n      15\n    );\n    drawEngine.drawText(\n      'Press Enter to start',\n      xCenter,\n      230,\n      colors.white,\n      1, // center\n      0, // top\n      4\n    );\n    drawEngine.drawText(\n      'Press F to toggle fullscreen',\n      xCenter,\n      280,\n      colors.blue4,\n      1, // center\n      0, // top\n      4\n    );\n    this.updateControls();\n  }\n\n  updateControls() {\n    if (controls.isConfirm && !controls.previousState.isConfirm) {\n      gameStateMachine.setState(new GameState());\n    }\n\n    const fPressed = Boolean(controls.keyMap.get('KeyF'));\n    if (fPressed && !this.previousFPressed) {\n      toggleFullscreen();\n    }\n    this.previousFPressed = fPressed;\n  }\n};\n\nexport const menuState = new MenuState();\n","import { createGameStateMachine, gameStateMachine } from './game-state-machine';\nimport { controls } from '@/core/controls';\nimport { drawEngine } from './core/draw-engine';\nimport { updateTimeEvents } from './core/timer';\nimport { menuState } from './game-states/menu.state';\nimport { emit } from './core/event';\nimport { GameEvent } from './game/event-manifest';\n\n// @ts-ignore -- is not undefined for sure\ndocument.querySelector('link[type=\"image/x-icon\"]').href = 'data:image/svg+xml,%3Csvg xmlns=\\'http://www.w3.org/2000/svg\\' viewBox=\\'0 0 100 100\\'%3E%3Ctext y=\\'.9em\\' font-size=\\'85\\'%3E💜%3C/text%3E%3C/svg%3E';\n\nlet previousTime = 0;\n// let fpsBacklog: number[] = [];\nlet paused = false;\n\nwindow.addEventListener('blur', () => {\n  emit(GameEvent.PAUSE);\n  paused = true;\n});\nwindow.addEventListener('focus', () => {\n  emit(GameEvent.UNPAUSE);\n  paused = false;\n});\n\nfunction update(currentTime: number) {\n  if (paused) return;\n\n  currentTime = performance.now();\n  let delta = currentTime - previousTime;\n  previousTime = currentTime;\n  if (delta > 1000) {\n    return;\n  }\n    \n  // fpsBacklog.push(1000 / delta);\n  // if (fpsBacklog.length === 15) {\n  //   fps.innerHTML = `${Math.round(fpsBacklog.reduce((a, b) => a + b) / 15)} FPS`;\n  //   fpsBacklog = [];\n  // }\n\n  drawEngine.clear();\n\n  const state = gameStateMachine.getState();\n  controls.queryController();\n  state.onUpdate(delta);\n  updateTimeEvents(delta);\n};\n\n\ncreateGameStateMachine(menuState);\nsetInterval(update, 16);\n","import { State } from './state';\n\nexport class StateMachine {\n  private currentState: State;\n\n  constructor(initialState: State, ...enterArgs: any) {\n    this.currentState = initialState;\n    this.currentState.onEnter?.(...enterArgs);\n  }\n\n  setState(newState: State, ...enterArgs: any) {\n    this.currentState.onLeave?.();\n    this.currentState = newState;\n    this.currentState.onEnter?.(...enterArgs);\n  }\n\n  getState() {\n    return this.currentState;\n  }\n}\n"],"names":["addTimeEvent","callback","time","repeat","delay","timeEvents","push","timeLeft","updateTimeEvents","delta","i","length","timeEvent","splice","updatePositionSmoothly","state","timeElapsed","axis","targetPos","d","step","Math","sign","speed","abs","moving","round","gameStateMachine","controls","constructor","this","isUp","isDown","isLeft","isRight","isConfirm","isAction1","isMoving","keyMap","Map","previousState","document","addEventListener","event","toggleKey","inputDirection","DOMPoint","queryController","gamepad","navigator","getGamepads","leftVal","get","rightVal","upVal","downVal","x","axes","y","isPressed","set","code","getCtx","canvas","getContext","createCanvasWithCtx","w","h","c","createElement","width","height","createCanvas","quantizeToPalette","r","g","b","a","emojiToPixelArt","emoji","fontSize","spriteSize","floor","padding","_","tmpCtx","font","textBaseline","clearRect","translate","fillText","data","getImageData","outImg","createImageData","outData","outCanvas","outCtx","putImageData","img","Image","src","toDataURL","generateImageData","icon","iconPalette","palette","colorsPerByte","bytesPerColor","bitMask","size","sqrt","setAttribute","ctx","imgData","map","z","charCodeAt","bit","paletteIndex","hex","replace","parseInt","substring","NewTileset","spriteSheet","animations","tileSize","animationName","frames","Object","entries","frameData","colors","cat","villager","statue","obelisk","oak","spruce","grass","house","split","e","GameAssets","initialize","cornerImage","cornerColor","fillStyle","fillRect","createCornerImage","tinyFont","characterCanvases","MAGIC","getCharacterData","letter","paddedBinary","leftmostCol","charWidth","toString","String","padStart","rightmostCol","col","row","min","max","makeCircle","centerX","centerY","radiusX","radiusY","skew","normalizedY","halfWidth","offset","rect","DrawEngine","canvasWidth","canvasHeight","cameraX","cameraY","zoom","targetCameraX","targetCameraY","targetZoom","cameraLerpSpeed","ctx1","c1","ctx2","c2","ctx3","c3","ctx4","c4","resizeCanvas","window","ctxs","imageSmoothingEnabled","drawCircumference","color","strokeWidth","save","beginPath","clip","fill","restore","drawText","text","textAlign","space","context","spacing","characters","toUpperCase","totalWidth","charPositions","forEach","character","char","letterHeight","offsetX","offsetY","charX","cacheKey","G","H","J","scaledWidth","match","bitIndex","adjustedCol","createCharacterCanvas","getCharacterCanvas","drawImage","mirrored","imgWidth","imgWeight","scale","drawBackgroundImage","imgHeight","setCamera","immediate","setTransform","updateCamera","resetCamera","clear","worldToScreen","worldX","worldY","drawEngine","CELL_WIDTH","CELL_HEIGHT","MAX_REPAIR","paths","clearings","statues","heart","name","moon","ear","eye","foot","tail","GameObject","tileset","type","animation","animationTime","animationFrame","aD","animationLoop","ceil","random","setPos","update","draw","on","listener","detail","emit","dispatchEvent","CustomEvent","linePixels","x0","y0","x1","y1","pixels","e2","dx","sx","dy","sy","err","PentagramAnimation","animationDone","pentagramRotation","PI","radius","elapsed","trailLength","cycles","maxCycles","active","cx","cy","points","angle","cos","sin","pentagramVertices","allPixels","totalDuration","newOffset","effectiveTrailLength","idx","isActive","forEachSurroundingCell","centerCol","centerRow","includeCenter","deltaRow","deltaCol","audioCtx","playSound","f","AudioContext","m","createBuffer","getChannelData","s","createBufferSource","buffer","connect","destination","start","n","repair","pitch","exp","Player","gameData","super","sleeping","attacking","scared","inVillage","pentagramAttack","stepSoundTimer","playerLookingAt","cellVillage","grid","village","coords","innerText","cutscene","isSurrounded","newRow","content","newCol","autoSelectTarget","attackAllEnemiesAround","pow","attackEnemyInFront","cell","takeDamage","spiritCount","currentCell","getLookingAt","directions","spiritTarget","statueTarget","dir","contentType","phase","GameStaticObject","Tree","treeType","neighbors","top","bottom","left","right","setNeighbors","SeededRandom","rngSeed","next","range","House","Villager","lastDirection","moveTimer","moveInterval","isScared","seesCat","takeNextStep","isValidMove","checkCol","checkRow","Farm","Village","center","houseCount","population","houses","farms","villagers","generatePosition","rng","existing","distance","some","item","generateHouses","pos","generateFarms","farmCount","generateVillagers","Icon","toKey","reconstructPath","parents","goal","path","current","unshift","defaultColors","drawHpBar","hp","maxHp","colorHP","hpWidth","barX","barY","spirits","reduce","acc","index","level","Spirit","opacity","searchRadius","dead","recoil","attackTimer","attackDuration","attackTarget","attackOffsetX","attackOffsetY","species","playerCoords","lookAroundForPlayer","moveTowardsPlayer","updateAttack","progress","dirX","dirY","windProgress","attackProgress","restProgress","searchCol","searchRow","maxSteps","steps","queue","visited","Set","shift","neighbour","has","add","findShortestPath","nextStep","globalAlpha","filter","damage","exorcise","Statue","maxSpirits","spawnTimer","spawnInterval","spawnChance","spawnRadius","State","BROKEN","repairD","repairAnimationTimer","spiritsExorcised","lastClearTime","updateAnimation","ANIMATING","REPAIRED","getLevel","spawnSpirit","replaceSpirit","spirit","drawFaries","postDraw","drawAnimation","t","theta","offsetDist","animationProgress","maxWidth","maxHeight","clearCircleWithJitter","emptyCells","selectedPosition","spiritTypes","values","randomType","GameMap","colCount","rowCount","villages","Array","from","_a","_b","tree","clearPathWithJitter","clearing","farm","fillCenterWithGrass","statueProps","farmCol","farmRow","clearPlants","converage","heartsPeak","villagePath","to","pathWidth","jitterAmount","jitterX","jitterY","ox","oy","clearX","clearY","fieldsOnly","border","probability","adjustedRadius","clearProbability","isCutscene","renderWidth","renderHeight","postDrawDrawables","seenRadius","seen","drawable","easeInOutSine","pixelColors","field","unseen","default","MiniMap","lastUpdate","updateInterval","player","mapSize","my","mx","arc","DialogBox","dialog","boxHeight","margin","boxWidth","HUD","actions","renderSuperstition","renderLives","renderMagic","villageName","villageNameTimer","miniMap","dialogBox","drawLives","drawMagic","drawGoals","drawSuperstition","drawActions","drawInfoBox","enabled","startX","symbol","fullHearts","lives","emptyHearts","halfHearts","partialHearts","boxW","fullMagic","magic","emptyMagic","maxMagic","noMagic","MAX_MAGIC","goals","label","boxY","NOTIFICATION_DURATION","boxH","superstition","drawInfo","Obelisk","attemptRepair","Actions","cellInFront","canTeleport","canRestore","canSleep","canAttack","doRestore","object","GameData","hasClearedIntro","win","scene","q","heal","Story","script","currentStateKey","currentDialogIndex","previousSpacePressed","currentState","fullText","visibleCharacters","textAnimationTimer","charactersPerSecond","textAnimationState","stateKey","enterState","showCurrentDialog","spacePressed","spaceJustPressed","targetCharacters","emitCurrentVisibleText","handleSpacePress","dialogs","exitCurrentState","visibleText","isDone","GameStory","story","magicLevel","musicPlayer","startTime","isPlaying","audioContext","webkitAudioContext","resume","audioWorklet","addModule","musicProcessorNode","AudioWorkletNode","startMelody","port","postMessage","pause","unpause","stop","disconnect","GameState","playMusic","onLeave","onEnter","setState","menuState","hud","onUpdate","animationTimer","previousFPressed","bgColors","sectionHeight","sectionW","yOffset","offsetFreq","cols","rows","iconSize","drawBackground","xCenter","updateControls","fPressed","fullscreenElement","exitFullscreen","documentElement","requestFullscreen","querySelector","href","previousTime","paused","initialState","enterArgs","newState","getState","createGameStateMachine","setInterval","currentTime","performance","now"],"mappings":"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"}